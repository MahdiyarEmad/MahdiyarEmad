1
00:00:00,000 --> 00:00:02,440
[MUSIC PLAYING]

3
00:00:17,707 --> 00:00:18,540
خیلی خب.

4
00:00:18,540 --> 00:00:21,750
خوش اومدید دوباره به همگی به برنامه نویسی وب با پایتون و جاوا اسکریپت.

5
00:00:21,750 --> 00:00:26,340
خب، دفعه قبل، ما نگاهی به دو زبان انداختیم، HTML و CSS، که هر دو

6
00:00:26,340 --> 00:00:28,090
می‌توان برای طراحی صفحات وب از آن‌ها استفاده کرد.

7
00:00:28,090 --> 00:00:31,440
اچ تی ام ال، ما استفاده کردیم به منظور توصیف ساختار صفحات وب،

8
00:00:31,440 --> 00:00:34,500
تصمیم بگیریم چه محتوایی را در طرح‌بندی صفحه می‌خواهیم،

9
00:00:34,500 --> 00:00:36,802
و سپس CSS، ما استفاده کردیم برای توصیف استایل

10
00:00:36,802 --> 00:00:39,260
از صفحه، چه رنگی میخواستیم\nچیزها باشند، چقدر فضا میخواستیم

11
00:00:39,260 --> 00:00:40,847
همچنین می‌خواستیم کارها را اجرا کنیم.

12
00:00:40,847 --> 00:00:42,930
امروز، ما قصد داریم توجهمان را به ابزاری معطوف کنیم

13
00:00:42,930 --> 00:00:46,170
که می‌توانیم با شروع توسعه این برنامه‌های وب از آن استفاده کنیم،

14
00:00:46,170 --> 00:00:49,310
و به طور خاص، ما قصد داریم به ابزاری به نام گیت نگاهی بیندازیم.

15
00:00:49,310 --> 00:00:53,040
و چیزی که گیت هست، اینه که یک ابزار کنترل نسخه است، نه مختص وب

16
00:00:53,040 --> 00:00:54,960
برنامه‌ها لزوماً، اما قرار است برویم

17
00:00:54,960 --> 00:00:58,380
که با شروع توسعه برنامه‌های بزرگتر و پیچیده‌تر از آن استفاده کنیم

18
00:00:58,380 --> 00:01:01,330
برنامه‌های وب بزرگتر و پیچیده‌تری را در طول این ترم توسعه دهیم.

19
00:01:01,330 --> 00:01:03,420
پس گیت قراره چه کاری رو برای ما ممکن کنه؟

20
00:01:03,420 --> 00:01:05,379
خب، این قرار است چند کار انجام دهد.

21
00:01:05,379 --> 00:01:08,310
اول و مهمتر از همه، Git چیست؛ این یک ابزار خط فرمان است

22
00:01:08,310 --> 00:01:12,600
که به ما این امکان رو میده که، اول، تغییراتی که توی کد ایجاد می‌کنیم رو پیگیری کنیم.

23
00:01:12,600 --> 00:01:14,520
خب، روزی روزگاری، و اولین باری که من

24
00:01:14,520 --> 00:01:16,380
داشتم شروع به توسعه\nبرنامه‌های وب می‌کردم،

25
00:01:16,380 --> 00:01:19,620
یادمه روی یه فایل کار می‌کردم، و بعد وقتی می‌خواستم تغییرات ایجاد کنم،

26
00:01:19,620 --> 00:01:23,010
ممکن بود بخواهم نسخه قدیمی را ذخیره کنم، بنابراین از فایل کپی می‌گرفتم

27
00:01:23,010 --> 00:01:26,098
و بعد فقط تغییرات رو روی کپی اعمال کنم، ولی این کار خیلی زود بهم‌ریخته میشه.

28
00:01:26,098 --> 00:01:28,140
مخصوصاً اگر نسخه‌های مختلف زیادی داشته باشید

29
00:01:28,140 --> 00:01:31,050
از کدتون در مراحل مختلف، پیگیریشون

30
00:01:31,050 --> 00:01:32,470
فقط شروع میکنه به تبدیل شدن به یک کابوس.

31
00:01:32,470 --> 00:01:35,528
بنابراین کاری که گیت (Git) برای ما انجام می‌دهد این است که تغییراتی که ایجاد می‌کنیم را پیگیری کنیم

32
00:01:35,528 --> 00:01:36,570
که ما در کد خود ایجاد می کنیم.

33
00:01:36,570 --> 00:01:40,530
پس ممکن است در ابتدا یک فایل ایجاد کنیم، آن نسخه را ذخیره کنیم، اما با گذشت زمان،

34
00:01:40,530 --> 00:01:43,470
همینطور که تغییرات ایجاد می‌کنیم، به آن اضافه می‌کنیم، چیزهایی را از آن حذف می‌کنیم،

35
00:01:43,470 --> 00:01:47,040
می‌تونیم از قسمت‌های مختلف عکس‌های فوری، به اصطلاح، ذخیره کنیم

36
00:01:47,040 --> 00:01:49,500
از کد خود در نقاط مختلف، به شکلی

37
00:01:49,500 --> 00:01:52,500
به طوری که بتوانیم به سرعت و به آسانی به تمام آن تغییرات ارجاع دهیم

38
00:01:52,500 --> 00:01:54,850
که تغییراتی که توی اون کد ایجاد کردیم رو بتونیم سریع و راحت رفرنس بدیم.

39
00:01:54,850 --> 00:01:56,790
به علاوه، Git این کار را آسان می‌کند

40
00:01:56,790 --> 00:01:59,550
برای ما هم آسونه که کد رو بین افراد مختلف همگام‌سازی کنیم.

41
00:01:59,550 --> 00:02:01,560
در مقیاس بزرگتر وب، به ندرت

42
00:02:01,560 --> 00:02:04,350
فقط یک نفر روی کل برنامه کار نمی کند.

43
00:02:04,350 --> 00:02:07,500
معمولاً، شما با یک همکار یا چند همکار\nدر حال کار هستید،

44
00:02:07,500 --> 00:02:10,289
همه در یک برنامه یکسان، و همه به طور همزمان.

45
00:02:10,289 --> 00:02:12,900
و یک قسمت قطعا پیچیده از این فرایند

46
00:02:12,900 --> 00:02:16,150
اینکه چطور کار خودتون رو بین افراد مختلف هماهنگ\nکنید، یه بخش واقعاً پیچیده است.

47
00:02:16,150 --> 00:02:18,630
اگر من تغییری در قسمت خودم از برنامه وب ایجاد کنم،

48
00:02:18,630 --> 00:02:21,930
می‌خوام مطمئن شم همکارانم هم می‌تونن اون تغییرات رو ببینن

49
00:02:21,930 --> 00:02:24,267
و به آخرین تغییراتی که ایجاد\nکردم دسترسی داشته باشند.

50
00:02:24,267 --> 00:02:26,850
و بعد می‌خواهم بتوانم به آخرین تغییرات دسترسی پیدا کنم

51
00:02:26,850 --> 00:02:28,808
که افرادی که باهاشون کار می‌کنم هم ایجاد کردند.

52
00:02:28,808 --> 00:02:31,380
پس ما به یه راهی نیاز داریم که همه چیز رو همگام نگه داریم و گیت

53
00:02:31,380 --> 00:02:33,100
قراره گیت این امکان رو به ما بده تا این کار رو انجام بدیم.

54
00:02:33,100 --> 00:02:36,180
چیزی که ما در واقع خواهیم داشت یک نسخه از کد ذخیره شده

55
00:02:36,180 --> 00:02:39,180
در جایی که ما می خواهیم آن را یک مخزن somewhere آنلاین بنامیم،

56
00:02:39,180 --> 00:02:42,330
و هم من و هم کسی که باهاش کار می‌کنم، مثلاً یه همکار،

57
00:02:42,330 --> 00:02:45,900
شاید هر دو من و کسی که باهاش کار می‌کنم - مثلاً یک همکار - بتونیم به همون مخزن یکسان دسترسی داشته باشیم،

58
00:02:45,900 --> 00:02:48,570
همون فایل‌ها در همون وضعیت.

59
00:02:48,570 --> 00:02:51,840
و اگر من و شخص دیگری تغییراتی در آن فایل‌ها ایجاد کنیم،

60
00:02:51,840 --> 00:02:55,920
ما می‌تونیم تغییراتی توی اون فایل‌ها ایجاد کنیم، و بعد اون‌ها رو دوباره هماهنگ کنیم،

61
00:02:55,920 --> 00:02:58,530
هل دادن آن‌ها به سمت سرور، به اصطلاح،

62
00:02:58,530 --> 00:03:02,250
بطوریکه سرور جدیدترین و بروزترین نسخه را داشته باشد

63
00:03:02,250 --> 00:03:03,390
از این کد.

64
00:03:03,390 --> 00:03:06,690
بعد از اون، بعد از اینکه هر دومون تغییراتمون رو به سرور فرستادیم،

65
00:03:06,690 --> 00:03:09,460
بعدش هردومون میتونیم تغییرات رو از سرور بگیریم،

66
00:03:09,460 --> 00:03:12,630
به اصطلاح، برای دسترسی به آخرین نسخه کد،

67
00:03:12,630 --> 00:03:15,630
به طوری که مهم نیست چه اتفاقی بیفتد، تا زمانی که من روی همان پروژه کار کرده‌ام

68
00:03:15,630 --> 00:03:18,510
که شریکم داشته، می‌توانیم از Git برای همگام‌سازی کارمان استفاده کنیم،

69
00:03:18,510 --> 00:03:23,360
بنابراین من به آخرین تغییرات همکارم دسترسی داشته باشم، و بالعکس.

70
00:03:23,360 --> 00:03:25,960
گیت همچنین ما را قادر می‌سازد تا تعدادی کار دیگر انجام دهیم.

71
00:03:25,960 --> 00:03:29,190
برای مثال، گیت به ما اجازه می‌دهد تغییرات کد خود را آزمایش کنیم

72
00:03:29,190 --> 00:03:31,260
بدون قطع دسترسی به نسخه اصلی.

73
00:03:31,260 --> 00:03:35,250
خب، برای مثال، ممکنه تصور کنید که وقتی دارم روی نوشتن یک برنامه کار می‌کنم،

74
00:03:35,250 --> 00:03:38,018
ممکنه بخوام یه سری تغییرات ایجاد کنم، ولی مطمئن نیستم

75
00:03:38,018 --> 00:03:39,310
اگه درست کار میکنن یا نه.

76
00:03:39,310 --> 00:03:41,190
خب، من می خوام اون تغییرات رو تست کنم، اما نمیخوام

77
00:03:41,190 --> 00:03:44,220
نمی‌خواهم دسترسی به نسخه اصلی\nکاربردی برنامه‌ام را از دست بدهم،

78
00:03:44,220 --> 00:03:46,120
فقط برای اینکه اگه یه مشکلی پیش اومد.

79
00:03:46,120 --> 00:03:48,930
پس کاری که گیت برای ما انجام میده اینه که به ما اجازه میده تغییرات ایجاد کنیم

80
00:03:48,930 --> 00:03:51,840
که به اصطلاح، روی یک شاخهٔ جداگانه کد را تغییر دهیم،

81
00:03:51,840 --> 00:03:54,960
به طوری که بعداً، وقتی از تغییرات راضی و خشنود بودیم،

82
00:03:54,960 --> 00:03:59,010
ما می توانیم آن تغییرات را دوباره در نسخه اصلی کد خود ادغام کنیم،

83
00:03:59,010 --> 00:04:02,520
توانایی تست کردن اون تغییرات قبل از اینکه واقعا مطمئن باشیم که همون تغییرات هستند

84
00:04:02,520 --> 00:04:03,990
که می‌خواهیم انجام دهیم.

85
00:04:03,990 --> 00:04:06,960
و در آخر، یک قابلیت قدرتمند که گیت به ما دسترسی می‌دهد

86
00:04:06,960 --> 00:04:09,775
قابلیتی که گیت در اختیار ما قرار میده، امکان برگشت به نسخه‌های قدیمی‌تر کدهامونه.

87
00:04:09,775 --> 00:04:12,900
خب، ممکنه در موقعیتی تصور کنید\nکه من روی یه کدی کار کردم،

88
00:04:12,900 --> 00:04:16,110
و متوجه میشم که در واقع، کاری که الان دارم انجام میدم چیزی نیست که میخوام،

89
00:04:16,110 --> 00:04:17,820
گیت به ما این امکان را میده که بگیم، میدونی چیه؟

90
00:04:17,820 --> 00:04:20,339
این آخرین تغییر چیزی نیست\nکه من می خواستم.

91
00:04:20,339 --> 00:04:24,470
من می‌خواهم به نسخهٔ قبلی کد برگردم.

92
00:04:24,470 --> 00:04:28,390
و گیت این کار را برای بازگشت به نسخه‌های قبلی بسیار آسان می‌کند.

93
00:04:28,390 --> 00:04:31,613
خب، هدف برای امروز این خواهد بود که یاد بگیریم چطور از این ابزار استفاده کنیم،

94
00:04:31,613 --> 00:04:33,780
برای یادگیری دستورات مختلف و گیت که

95
00:04:33,780 --> 00:04:36,090
بسیار محبوب خواهد بود و بسیار رایج، همانطور که شما

96
00:04:36,090 --> 00:04:38,400
در حین کار روی برنامه‌های وب یا واقعاً

97
00:04:38,400 --> 00:04:41,790
هر پروژه‌ی مرتبط با کد، چون کنترل نسخه واقعاً امکانات

98
00:04:41,790 --> 00:04:45,240
اجازه میده یه سری ویژگی های مفید\nکه وقتی شروع می کنی عملی هستن

99
00:04:45,240 --> 00:04:48,390
تا روی پروژه‌های بزرگ‌تر و بزرگ‌تر کار کنید.

100
00:04:48,390 --> 00:04:51,090
اما در نهایت، وقتی شروع می‌کنیم\nروی این پروژه‌های گیت کار کنیم

101
00:04:51,090 --> 00:04:53,340
آنها باید جایی به صورت آنلاین ذخیره شوند، مثل اینکه

102
00:04:53,340 --> 00:04:55,500
که بتونیم اون‌ها رو از هر جایی دانلود کنیم،

103
00:04:55,500 --> 00:04:57,720
به طوری که من و یک همکار بتونیم هر دو کار کنیم

104
00:04:57,720 --> 00:05:01,450
روی یک فایل مشابه و کد مشابه کار کنیم، و برای انجام این کار،

105
00:05:01,450 --> 00:05:03,127
ما نیاز داریم کد گیت خود را جایی میزبانی کنیم.

106
00:05:03,127 --> 00:05:05,710
و تعدادی وبسایت مختلف وجود دارند که می‌توانند این کار را انجام دهند،

107
00:05:05,710 --> 00:05:08,670
ولی یکی از محبوب ترین ها وب سایتی است که به نام گیت هاب شناخته می شود.

108
00:05:08,670 --> 00:05:12,030
گیت‌هاب وب‌سایتی است که\nمخازن گیت را ذخیره می‌کند، جایی که

109
00:05:12,030 --> 00:05:14,220
همه مخزن اینجاست، می‌توانید اینطور فکر کنید

110
00:05:14,220 --> 00:05:18,810
به عنوان یه پوشه که یه عالمه کد و فایل مربوط به کدمون رو نگه می‌داره، در نظرش بگیرید.

111
00:05:18,810 --> 00:05:22,350
بنابراین، ما قصد داریم این کد را به صورت آنلاین در وب سایتی به نام GitHub میزبانی کنیم،

112
00:05:22,350 --> 00:05:26,640
و بعد روی کامپیوتر خودمان، قادر خواهیم بود به این مخازن گیت‌هاب دسترسی پیدا کنیم

113
00:05:26,640 --> 00:05:28,860
و با تغییر، آن مخازن را دستکاری کنیم

114
00:05:28,860 --> 00:05:30,998
فایل‌هایی که درون آن‌ها هستند را.

115
00:05:30,998 --> 00:05:32,790
خب، بیاین یه نگاهی به گیت‌هاب بندازیم

116
00:05:32,790 --> 00:05:37,118
و ببینیم چطور می‌تونیم اولین ریپازیتوری گیت‌هاب خودمون رو ایجاد کنیم.

117
00:05:37,118 --> 00:05:38,910
اگر از قبل یک حساب\nگیت‌هاب ندارید،

118
00:05:38,910 --> 00:05:40,860
می‌تونید با رفتن به GitHub.com یه حساب باز کنید.

119
00:05:40,860 --> 00:05:42,720
و ثبت نام برای یک حساب کاربری به صورت رایگان.

120
00:05:42,720 --> 00:05:47,060
و حالا به GitHub.com/new می‌روم.

121
00:05:47,060 --> 00:05:53,030
GitHub.com/new صفحه‌ای هست که اگر بخواهم یک مخزن جدید در گیت‌هاب بسازم، به آن می‌روم.

122
00:05:53,030 --> 00:05:57,420
پس بیایید نگاهی بیندازیم به اینکه برای ساختن یک ریپازیتوری چه کارهایی باید انجام دهم.

123
00:05:57,420 --> 00:06:00,970
اولین کاری که باید انجام دهم این است که به مخزن خود یک نام بدهم.

124
00:06:00,970 --> 00:06:03,970
خب، در این مورد، من فقط می‌خوام اسم این repository رو بذارم hello.

125
00:06:03,970 --> 00:06:06,262
شما می‌توانید هر اسمی بهش بدید، تا زمانی که اون اسم

126
00:06:06,262 --> 00:06:09,480
با نام‌های دیگر ریپازیتوری‌هایی که از قبل دارید تداخل نداشته باشد.

127
00:06:09,480 --> 00:06:13,050
گیت‌هاب به‌طور اختیاری به من اجازه می‌دهد تا یک توضیح برای این مخزن ارائه کنم.

128
00:06:13,050 --> 00:06:17,430
فقط می‌گم: برنامه‌نویسی وب\nبا پایتون و جاوا اسکریپت.

129
00:06:17,430 --> 00:06:21,010
و بعد گیت‌هاب این انتخاب رو به من میده، آیا میخوام این یه مخزن عمومی باشه،

130
00:06:21,010 --> 00:06:23,340
به طوری که هر کسی بتواند مخزن را ببیند؟

131
00:06:23,340 --> 00:06:25,950
لزوماً همه نمی‌تونن توش تغییر ایجاد کنن،

132
00:06:25,950 --> 00:06:28,860
اما اگر کسی بخواهد کد من را دانلود کند، به صورت عمومی در دسترس است.

133
00:06:28,860 --> 00:06:29,850
و امتحانش کنند.

134
00:06:29,850 --> 00:06:31,770
عمومی به این معنی است که هر کسی می‌تواند به آن دسترسی داشته باشد.

135
00:06:31,770 --> 00:06:35,365
یا خصوصی، به این معنی که، به طور پیش فرض، فقط من می توانم این مخزن را ببینم،

136
00:06:35,365 --> 00:06:38,490
ولی میتونم انتخاب کنم که آیا میخوام افراد دیگه هم بتونن اون رو ببینن یا نه،

137
00:06:38,490 --> 00:06:40,440
و می توانم انتخاب کنم کدام افراد.

138
00:06:40,440 --> 00:06:43,170
فعلا، من این ریپازیتوری را عمومی خواهم کرد،

139
00:06:43,170 --> 00:06:46,440
و من پایین میام اینجا و روی دکمهٔ سبز رنگ ایجاد ریپازیتوری کلیک می‌کنم

140
00:06:46,440 --> 00:06:49,920
برای ساختن این ریپازیتوری جدید.

141
00:06:49,920 --> 00:06:51,920
پس دکمه‌ی ایجاد ریپازیتوری را می‌زنم.

142
00:06:51,920 --> 00:06:52,570
و این هم اینجاست.

143
00:06:52,570 --> 00:06:55,570
این صفحه‌ی مخزن گیت‌هاب است، و الان، شما

144
00:06:55,570 --> 00:06:57,790
متوجه خواهید شد که اینجا تعداد زیادی دستورالعمل وجود دارد،

145
00:06:57,790 --> 00:06:59,950
ولی فایلی وجود ندارد، چون در حال حاضر،

146
00:06:59,950 --> 00:07:02,650
وقتی اولین بار اولین ریپازیتوری گیت خودم را ایجاد کردم،

147
00:07:02,650 --> 00:07:05,390
یه ریپازیتوری خالی که هیچی توش نبود گیرم اومد.

148
00:07:05,390 --> 00:07:08,620
خب، کاری که الان می‌خوام انجام بدم اینه که یه جوری این ریپازیتوری رو دانلود کنم

149
00:07:08,620 --> 00:07:11,590
روی کامپیوترم، به طوری که بتونم مثلاً یه چیزی اضافه کنم،

150
00:07:11,590 --> 00:07:16,660
یک فایل HTML که شامل مقداری HTML است را اضافه کنم، که می‌خواهم با استفاده از Git آن را پیگیری کنم.

151
00:07:16,660 --> 00:07:18,425
خب، چطور میخوام این کار رو انجام بدم؟

152
00:07:18,425 --> 00:07:21,550
خب، برای انجام این کار، ما قصد داریم\nنگاهی به اولین گیت بندازیم

153
00:07:21,550 --> 00:07:25,840
دستوری که در Git دخیل خواهد بود\nکه به عنوان git clone شناخته می‌شود.

154
00:07:25,840 --> 00:07:28,060
دستور git clone یک دستوره که می‌تونیم برای این اجراش کنیم

155
00:07:28,060 --> 00:07:32,327
برای گرفتن یک ریپازیتوری از اینترنت و دانلود آن روی کامپیوتر خودمان.

156
00:07:32,327 --> 00:07:34,660
پس باید Git رو روی کامپیوترتون نصب داشته باشید.

157
00:07:34,660 --> 00:07:38,688
میتونید اون رو روی هر مک یا پی‌سی یا دستگاه لینوکس نصب کنید، و وقتی این کار رو انجام دادید،

158
00:07:38,688 --> 00:07:41,230
کاری که قراره انجام بدید اینه که، روی\nکامپیوترتون توی ترمینال،

159
00:07:41,230 --> 00:07:46,508
شما آن را git clone اجرا خواهید کرد، و به دنبال آن URL ریپازیتوری گیت

160
00:07:46,508 --> 00:07:47,800
که دارید سعی می کنید دانلود کنید.

161
00:07:47,800 --> 00:07:50,175
خب، ممکنه تصور کنید که کامپیوتر شما اینجاست،

162
00:07:50,175 --> 00:07:53,500
و در بالا یک سروری وجود دارد که یک ریپازیتوری گیت در آن قرار دارد.

163
00:07:53,500 --> 00:07:56,800
برای مثال، گیت‌هاب یکی از این سرورها است، اما سرورهای دیگری هم وجود دارند.

164
00:07:56,800 --> 00:08:00,010
و آن بالا مخزنی است که به طور بالقوه فایل‌ها یا شاید دارد

165
00:08:00,010 --> 00:08:04,240
و بالا آن مخزنی است
که احتمالاً فایل‌ها یا شاید
پوشه‌های دیگری با فایل‌های دیگری دارد
که شامل محتویات مخزن است
که به دانلود آن اهمیت می‌دهید.

166
00:08:04,240 --> 00:08:06,040
که دانلود کردنش براتون مهمه.

167
00:08:06,040 --> 00:08:09,970
پس اگر من دستور git clone را به همراه\nآدرس اینترنتی مخزن مورد نظرم اجرا کنم،

168
00:08:09,970 --> 00:08:13,480
اثر آن این است که مخزن و تمام محتویات آن

169
00:08:13,480 --> 00:08:17,290
دانلود می‌شوند روی کامپیوترم، طوری که من روی کامپیوترم

170
00:08:17,290 --> 00:08:20,440
حالا یک کپی از همه چیز دارم
که در اصل

171
00:08:20,440 --> 00:08:23,230
داخل آن مخزن گیت بوده است.

172
00:08:23,230 --> 00:08:26,740
خب، حالا که می‌دونیم چطوری یه مخزن رو کلون کنیم، بیاین امتحانش کنیم.

173
00:08:26,740 --> 00:08:29,500
ما تازه یک مخزن با استفاده از گیتهاب ایجاد کردیم،

174
00:08:29,500 --> 00:08:31,870
و حالا بذارید برم توی ترمینالم و واقعاً امتحان

175
00:08:31,870 --> 00:08:36,070
تا این ریپازیتوری را کلون کنم، تا یک کپی از آن روی کامپیوترم داشته باشم،

176
00:08:36,070 --> 00:08:39,090
و می تونم شروع کنم به ایجاد
یه سری تغییرات درش.

177
00:08:39,090 --> 00:08:43,960
خب، الان میرم توی ترمینالم، و میرم توی دایرکتوری لیکچر۱.

178
00:08:43,960 --> 00:08:45,710
و اولین چیزی که بهش احتیاج دارم

179
00:08:45,710 --> 00:08:48,990
نیاز دارم URL ریپازیتوری رو نیاز دارم.

180
00:08:48,990 --> 00:08:51,710
پس اگه برگردم به گیتهاب، چیزی که متوجه میشید

181
00:08:51,710 --> 00:08:57,070
می‌بینید که یک لینک HTTPS به من می‌دهد تا بتوانم ریپازیتوری Git خودم را دانلود کنم.

182
00:08:57,070 --> 00:09:00,320
بنابراین چند روش مختلف وجود دارد
که می‌توانم برای کپی کردن ریپازیتوری‌ام استفاده کنم،

183
00:09:00,320 --> 00:09:02,330
از راه‌های احراز هویت خودم.

184
00:09:02,330 --> 00:09:04,103
یکی استفاده از HTTPS هست،
که در نهایت

185
00:09:04,103 --> 00:09:06,020
شامل یک نام کاربری و رمز عبور میشه که من باید

186
00:09:06,020 --> 00:09:08,540
باید تایپ کنم، تا به گیت ثابت کنم

187
00:09:08,540 --> 00:09:10,580
که اینها اعتبارنامه های GitHub من هستند.

188
00:09:10,580 --> 00:09:12,800
از طرف دیگر، اگر با SSH آشنایی دارید،

189
00:09:12,800 --> 00:09:14,690
این یک روش دیگر احراز هویت است.

190
00:09:14,690 --> 00:09:19,175
شما همچنین می توانید کلید SSH عمومی خود را به GitHub بدهید
تا از این طریق هم احراز هویت شوید،

191
00:09:19,175 --> 00:09:21,050
ولی اگر با آن آشنا نیستید،
لازم نیست نگران باشید

192
00:09:21,050 --> 00:09:23,420
به اندازه کافی با آن فناوری آشنا نیستید.

193
00:09:23,420 --> 00:09:26,440
نکته‌ی کلیدی اینجا اینه که\nاین آدرس، آدرس گیت‌هاب هست

194
00:09:26,440 --> 00:09:28,950
آدرسی است که مربوط به مخزن من است.

195
00:09:28,950 --> 00:09:32,510
خب، من این آدرس اینترنتی رو کپی می‌کنم،
و بعدش داخل ترمینالم،

196
00:09:32,510 --> 00:09:37,100
توی ترمینال یه git clone تایپ می‌کنم و بعدش URL رو پیست می‌کنم.

197
00:09:37,100 --> 00:09:39,830
که می‌خوام کلون کنم که شامل اون ریپازیتوری هست.

198
00:09:39,830 --> 00:09:41,180
من دکمه‌ی Return رو می‌زنم.

199
00:09:41,180 --> 00:09:44,693
نوشته داره یه دایرکتوری رو به اسم\nhello کلون می‌کنه، و بعدش میگه،

200
00:09:44,693 --> 00:09:46,610
به نظر می‌رسد یک مخزن خالی را شبیه‌سازی کرده‌اید.

201
00:09:46,610 --> 00:09:48,020
داره میگه این یه هشداره، ولی مشکلی نداره،

202
00:09:48,020 --> 00:09:51,270
چون می‌دونم که یه ریپازیتوری خالی رو کلون کردم، چون ریپازیتوری

203
00:09:51,270 --> 00:09:52,820
کاملاً نو است.

204
00:09:52,820 --> 00:09:56,400
و حالا می‌توانم دستور
ls را در ترمینالم تایپ کنم.

205
00:09:56,400 --> 00:09:59,030
دستور ls در ترمینال مخفف list است،

206
00:09:59,030 --> 00:10:01,250
و در واقع کاری که
انجام میده اینه که لیست میکنه

207
00:10:01,250 --> 00:10:04,972
همه فایل هایی که در حال حاضر داخل این دایرکتوری هستند را لیست می کند،

208
00:10:04,972 --> 00:10:06,680
تمام فایل‌ها و پوشه‌هایی که داخل هستند

209
00:10:06,680 --> 00:10:09,350
از دایرکتوری lecture1 من، جایی که دایرکتوری فقط

210
00:10:09,350 --> 00:10:10,900
یک اسم قشنگ برای پوشه است.

211
00:10:10,900 --> 00:10:13,340
خب، تایپ می‌کنم ls، و می‌بینم که، بسیار خب،

212
00:10:13,340 --> 00:10:17,810
من الان یک پوشه دارم به نام hello درون دایرکتوری lecture1 که

213
00:10:17,810 --> 00:10:19,100
قبلاً نداشتمش.

214
00:10:19,100 --> 00:10:21,350
من جلو میرم و به داخل این دایرکتوری هلو تغییر مکان میدم.

215
00:10:21,350 --> 00:10:25,940
برای تغییر به یک دایرکتوری یا پوشه، می‌توانید از دستور cd استفاده کنید.

216
00:10:25,940 --> 00:10:28,430
سی دی مخفف عبارت تغییر دایرکتوری است.

217
00:10:28,430 --> 00:10:34,852
و بنابراین اگر من بنویسم سی‌دی هلو، من الان خودم را به داخل دایرکتوری هلو منتقل خواهم کرد.

218
00:10:34,852 --> 00:10:36,560
و اگر تایپ کنم ls، می‌بینید که

219
00:10:36,560 --> 00:10:40,220
هیچی داخل این پوشه‌ی سلام وجود نداره، چون دوباره،

220
00:10:40,220 --> 00:10:41,810
این مخزن خالی بود.

221
00:10:41,810 --> 00:10:44,070
من اون رو کپی کردم، و هیچ چیزی داخلش نبود.

222
00:10:44,070 --> 00:10:47,270
پس الان می‌خوام یه چیزی توی این مخزن بذارم.

223
00:10:47,270 --> 00:10:50,060
مخزن فقط زمانی مفیده
که من کدم رو زیر نظر داشته باشم

224
00:10:50,060 --> 00:10:52,580
و پیگیری تغییراتی که در آن کد ایجاد می‌کنم.

225
00:10:52,580 --> 00:10:57,300
خب، من الان سعی می‌کنم که یک سری کد به مخزن اضافه کنم.

226
00:10:57,300 --> 00:10:59,480
اولین کاری که می‌کنم اینه که یه فایل جدید بسازم.

227
00:10:59,480 --> 00:11:02,442
و ما میتونیم یه فایل جدید بسازیم
فقط با باز کردن یه ادیتور متن،

228
00:11:02,442 --> 00:11:04,400
اما در ترمینال، در واقع یک دستور وجود دارد

229
00:11:04,400 --> 00:11:06,870
برای ساختن یک فایل جدید به اسم تاچ (touch) هم وجود داره.

230
00:11:06,870 --> 00:11:13,130
خب، توی ترمینال، می‌تونم تایپ کنم touch hello.html، و کاری که انجام میده اینه که

231
00:11:13,130 --> 00:11:15,830
یک فایل جدید به اسم hello.html می‌سازه.

232
00:11:15,830 --> 00:11:20,660
و اگر تایپ کنم ls، می‌تونم ببینم که در واقع یه فایلی دارم به اسم hello.html.

233
00:11:20,660 --> 00:11:23,990
حالا داخل دایرکتوری هلو، بذارید الان

234
00:11:23,990 --> 00:11:29,510
این پوشه را در فایل hello.html داخل یک ویرایشگر متن باز کنید.

235
00:11:29,510 --> 00:11:31,390
دوباره، من دارم از وی‌اس کد استفاده می‌کنم.

236
00:11:31,390 --> 00:11:34,970
و اجازه دهید الان فقط کمی متن به hello.html اضافه کنم.

237
00:11:34,970 --> 00:11:38,920
من فقط یک صفحه HTML ساده اضافه می‌کنم، همون چیزی که قبلاً دیدیم،

238
00:11:38,920 --> 00:11:41,570
جایی که یک سرتیتر به آن می‌دهم،\nیک عنوان خواهد بود سلام،

239
00:11:41,570 --> 00:11:45,080
و داخل بدنهٔ صفحه نوشته خواهد شد "Hello, world!"

240
00:11:45,080 --> 00:11:47,240
همان صفحه HTML که چند بار دیده‌ایم.

241
00:11:47,240 --> 00:11:51,750
الان، درست الان داخل این مخزن.

242
00:11:51,750 --> 00:11:55,230
البته، من هنوز هیچ ذخیره‌ای در این مخزن انجام نداده‌ام.

243
00:11:55,230 --> 00:11:58,110
من نگفتم که می‌خوام این تغییرات رو توی ریپازیتوری ذخیره کنم.

244
00:11:58,110 --> 00:12:02,250
و ریپازیتوری پیگیر تک تک کاراکترهایی که من می‌نویسم نیست.

245
00:12:02,250 --> 00:12:06,320
باید به گیت بگم که این یک وضعیت از فایل‌های فعلی منه

246
00:12:06,320 --> 00:12:09,320
که مایلم پیگیری کنم، چیزی که مایلم ذخیره کنم.

247
00:12:09,320 --> 00:12:12,810
و در دنیای گیت، ما آن نقاط ذخیره را کامیت می‌نامیم.

248
00:12:12,810 --> 00:12:15,000
وقتی می‌گم، دارم یه کامیت\nانجام میدم، منظورم اینه که من

249
00:12:15,000 --> 00:12:17,670
می‌خوام وضعیت فعلی همه‌ی فایل‌ها رو ذخیره کنم

250
00:12:17,670 --> 00:12:20,700
و پوشه‌ها و دیگر متعلقاتی که
داخل ریپازیتوری وجود دارند

251
00:12:20,700 --> 00:12:23,640
و اساساً یک عکس فوری از موقعیت فعلی آنها می گیریم،

252
00:12:23,640 --> 00:12:27,040
طوری که بعداً بتوانم به آن‌ها مراجعه کنم.

253
00:12:27,040 --> 00:12:30,250
اما برای انجام این کار، در واقع چند مرحله وجود دارد.

254
00:12:30,250 --> 00:12:32,970
پس اولین قدمی که باید دنبال کنیم، یک دستور اضافی است.

255
00:12:32,970 --> 00:12:35,790
خب، دیدیم که git clone دستوری بود که می‌تونستیم برای این که

256
00:12:35,790 --> 00:12:40,650
برای شبیه‌سازی یک ریپازیتوری، گرفتن یک ریپازیتوری و دانلود کردن آن روی کامپیوتر خودمان.

257
00:12:40,650 --> 00:12:44,370
دستور بعدی که نگاهی به آن می اندازیم، دستوری است به نام git add.

258
00:12:44,370 --> 00:12:46,530
و کاری که گیت اد انجام میده اینه که

259
00:12:46,530 --> 00:12:50,730
این به ما امکان میده به گیت بگوییم که من می خواهم یک فایل را به عنوان یک فایل اضافه کنم

260
00:12:50,730 --> 00:12:54,040
برای ردیابی دفعه‌ی بعد که ذخیره می‌کنم، دفعه‌ی بعد

261
00:12:54,040 --> 00:12:56,040
من یک کامیت انجام میدم تا بگم
که میخوام بردارم

262
00:12:56,040 --> 00:13:00,570
یه عکس فوری از همه‌ی این فایل‌ها بگیرم، طوری که بتونم بعداً بهشون مراجعه کنم.

263
00:13:00,570 --> 00:13:03,960
و برای انجام این کار، باید به گیت بگم که ردگیری چه فایل‌هایی رو انجام بده.

264
00:13:03,960 --> 00:13:06,690
پس اگر، برای مثال، من دارم روی این فایل کار می‌کنم،

265
00:13:06,690 --> 00:13:08,910
و می‌خوام به گیت بگم
که می‌خوام اون رو ردیابی کنم،

266
00:13:08,910 --> 00:13:13,410
میتونم یه دستوری مثل git add اجرا کنم، و بعدش اسم فایل رو بیارم مثل

267
00:13:13,410 --> 00:13:16,980
foo.py یا .html یا هر فایل دیگری که باشد.

268
00:13:16,980 --> 00:13:18,750
و بعد Git یک پیغام نمایش خواهد داد که میگوید

269
00:13:18,750 --> 00:13:21,510
که در حال حاضر، ما foo.py را اضافه کرده‌ایم.

270
00:13:21,510 --> 00:13:26,760
این الان یک فایلی است که دفعه‌ی بعدی که یک کامیت انجام دهم،
ذخیره خواهد شد.

271
00:13:26,760 --> 00:13:28,438
پس چرا این دو تا مرحله جدا از هم هستن؟

272
00:13:28,438 --> 00:13:30,480
خب، یک دلیلی که ممکنه تصور\nکنید اینه که اگه من

273
00:13:30,480 --> 00:13:34,350
دارم روی خیلی فایل های مختلف کار میکنم مثلا دارم روی ده تا فایل مختلف کار میکنم،

274
00:13:34,350 --> 00:13:37,710
و فقط سه تا هستند که ازشون\nخوشم میاد، سه تایی که میخوام ذخیره کنم،

275
00:13:37,710 --> 00:13:41,095
نمی‌خوام فقط بگم ذخیره کن و همه‌چی توی یک کامیت ذخیره بشه.

276
00:13:41,095 --> 00:13:42,720
شاید بخوام بگم می‌دونی چیه؟

277
00:13:42,720 --> 00:13:46,290
اینها تنها سه فایلی هستند که من واقعاً می خواهم الان ذخیره کنم،

278
00:13:46,290 --> 00:13:48,270
و بقیه رو هنوز دارم روشون کار می‌کنم.

279
00:13:48,270 --> 00:13:51,300
پس این قابلیت رو به ما میده که
این جدایی رو داشته باشیم که بگیم،

280
00:13:51,300 --> 00:13:55,650
بذارید صریحاً بگم که می‌خوام این فایل رو دفعه‌ی بعدی که ذخیره می‌کنم، ردیابی کنم،

281
00:13:55,650 --> 00:13:58,140
دفعه بعد که یک
کامیت انجام می‌دهم، و نه همه

282
00:13:58,140 --> 00:14:01,200
از فایل‌ها، برای مثال، اگرچه میانبرهایی وجود دارد که اگر بخواهیم از آنها استفاده کنیم

283
00:14:01,200 --> 00:14:05,530
می‌خوایم همه‌ی فایل‌ها رو اضافه کنیم، و اون‌ها رو هم یک لحظه دیگه می‌بینیم.

284
00:14:05,530 --> 00:14:06,940
خب، بیاین امتحانش کنیم.

285
00:14:06,940 --> 00:14:11,010
برمی‌گردیم به ریپازیتوری خودمون جایی که این فایل hello.html رو ساختم،

286
00:14:11,010 --> 00:14:13,080
و حالا کاری که می‌خوام انجام بدم اینه که بگم من

287
00:14:13,080 --> 00:14:17,160
مایلم فایل hello.html\n را به مخزن گیت خود اضافه کنم.

288
00:14:17,160 --> 00:14:20,430
خب، داخل ترمینالم، الان می‌گم--

289
00:14:20,430 --> 00:14:22,860
باز هم، من یک فایل hello.html اینجا دارم--

290
00:14:22,860 --> 00:14:28,640
من میگم گیت اَد، بعدش hello.html.

291
00:14:28,640 --> 00:14:31,680
و متوجه خواهید شد که تا اینجا، به نظر می رسد هیچ اتفاقی نیفتاده است،

292
00:14:31,680 --> 00:14:33,720
چون تا الان، هنوز هیچی رو ذخیره نکردم.

293
00:14:33,720 --> 00:14:38,070
من فقط گفتم که می خواهم hello.html را به عنوان یک فایل اضافه کنم

294
00:14:38,070 --> 00:14:42,240
اینکه دفعه بعدی که میگم ذخیره کن، دفعه بعدی که مخزنم رو ثبت می‌کنم،

295
00:14:42,240 --> 00:14:46,830
این باعث میشه که دفعه بعدی که میگم ذخیره کن، دفعه بعدی که ریپازیتوری‌ام رو کامیت میکنم، قراره تغییراتی که الان توی hello.html ایجاد کردم رو پیگیری کنه.

296
00:14:46,830 --> 00:14:48,330
پس چطور واقعاً یک کامیت انجام بدم؟

297
00:14:48,330 --> 00:14:51,120
چطور می‌تونم در واقع بگم، ذخیره کنم\nوضعیت این فایل‌ها رو؟

298
00:14:51,120 --> 00:14:55,050
خب، این یک دستور Git دیگر خواهد بود، که به عنوان git commit شناخته می شود.

299
00:14:55,050 --> 00:14:58,320
وقتی میگم گیت کامیت، میخوام به\nمخزن گیتم بگم که میخوام

300
00:14:58,320 --> 00:15:01,830
مایلم یک عکس فوری از وضعیت فعلی ریپازیتوری ذخیره کنم،

301
00:15:01,830 --> 00:15:04,650
پیگیری هر تغییری که در فایل‌ها ایجاد شده

302
00:15:04,650 --> 00:15:06,780
که با استفاده از git add اضافه کرده‌ام.

303
00:15:06,780 --> 00:15:11,670
و روش اجرای آن با اجرای git commit است، و به دنبال آن m-، و سپس

304
00:15:11,670 --> 00:15:13,920
در گیومه، یک پیام.

305
00:15:13,920 --> 00:15:16,230
و این پیام به عنوان
به عنوان پیام کامیت شناخته می شود،

306
00:15:16,230 --> 00:15:18,960
و چیزی که هست، این یه توضیحه به انگلیسی،

307
00:15:18,960 --> 00:15:21,780
یا هر زبانی که دارید، از تغییرات

308
00:15:21,780 --> 00:15:25,075
از تغییراتی که در آخرین commit\nانجام دادی، چون با گذشت زمان

309
00:15:25,075 --> 00:15:28,200
وقتی روی یک پروژه بزرگ کار می‌کنی، احتمالا تعداد زیادی commit انجام میدی

310
00:15:28,200 --> 00:15:30,150
همینطور که تغییرات زیادی در برنامه‌تان ایجاد می‌کنید.

311
00:15:30,150 --> 00:15:32,400
شما بعد از هر اضافه‌ی جدید، بارها کامیت می‌کنید.

312
00:15:32,400 --> 00:15:33,750
که در پروژه ایجاد می کنید.

313
00:15:33,750 --> 00:15:36,200
و شاید بخواهید به یک کامیت قبلی مراجعه کنید،

314
00:15:36,200 --> 00:15:37,950
ولی فقط زمانی با ارزشه که بتونی

315
00:15:37,950 --> 00:15:42,130
تشخیص دهید که برای مثال، کدام تغییر خاص را در کدام کامیت ایجاد کرده‌اید.

316
00:15:42,130 --> 00:15:44,700
پس با ارائه یه پیغام انگلیسی-- فقط یه یادداشت

317
00:15:44,700 --> 00:15:48,480
به خودت-- طوری که بعدا بتونی
به تمام پیام‌های کامیتت مراجعه کنی

318
00:15:48,480 --> 00:15:51,270
و بدونی که، خیلی خب، در این
لحظه، در این کامیت،

319
00:15:51,270 --> 00:15:53,910
این تغییریه که من ایجاد کردم
که می‌تونه کار رو آسون‌تر کنه

320
00:15:53,910 --> 00:15:57,570
تا بتونید تمام تغییراتی که
توی یک گیت خاص دادید رو پیگیری کنید

321
00:15:57,570 --> 00:15:58,950
مخزن. repository.

322
00:15:58,950 --> 00:16:02,340
پس وقتی تایپ می‌کنید گیت کامیت و بعدش m-، ممکنه پیامی رو هم وارد کنید،

323
00:16:02,340 --> 00:16:05,230
یه چیزی مثل "من یک خط جدید اضافه کردم" برای مثال.

324
00:16:05,230 --> 00:16:09,300
و وقتی این کار رو انجام میدید، گیت یک snapshot جدید از یک نسخه از کدتون ذخیره میکنه

325
00:16:09,300 --> 00:16:13,320
همین حالا، پیگیری نسخه‌ی قدیمی یا نسخه‌های قدیمی

326
00:16:13,320 --> 00:16:16,990
که قبلاً اونجا داخل ریپازیتوری وجود داشت.

327
00:16:16,990 --> 00:16:19,410
خب، بیاین سعی کنیم و الان یه کامیت انجام بدیم و ببینیم

328
00:16:19,410 --> 00:16:21,070
ببینیم که چطوری در واقع کار میکنه.

329
00:16:21,070 --> 00:16:24,000
خب، ما فایل رو اضافه کردیم، با اجرای دستور git add،

330
00:16:24,000 --> 00:16:26,790
که بگم فایل hello.html رو به عنوان فایلی برای نگهداری اضافه کن

331
00:16:26,790 --> 00:16:29,130
پیگیری کنیم، ولی الان وقتی که\nازش راضی هستیم

332
00:16:29,130 --> 00:16:32,070
و اگر بخواهیم می توانیم تغییرات بیشتری در فایل ایجاد کنیم،

333
00:16:32,070 --> 00:16:38,280
میتونم برگردم توی ترمینال
و حالا بگم گیت کامیت و بعدش -m،

334
00:16:38,280 --> 00:16:40,650
و بعد می‌توانم پیام commit را مشخص کنم،

335
00:16:40,650 --> 00:16:45,060
یه توضیح انگلیسی از کاری که من تو این آخرین commit انجام دادم.

336
00:16:45,060 --> 00:16:50,840
و کاری که کردم این بود که فایل
hello.html رو اضافه کردم.

337
00:16:50,840 --> 00:16:53,650
خب، فقط می‌خوام بگم، من فایل hello.html رو اضافه کردم.

338
00:16:53,650 --> 00:16:56,940
تغییری که من توی آخرین کامیت ایجاد کردم این بود.

339
00:16:56,940 --> 00:16:58,820
من دکمه Return را فشار خواهم داد.

340
00:16:58,820 --> 00:17:00,450
و این چیزی است که دارد به من می‌گوید.

341
00:17:00,450 --> 00:17:04,390
داره بهم میگه یک فایل با نه مورد اضافه شده تغییر کرده.

342
00:17:04,390 --> 00:17:07,319
پس گیت تغییرات رو بر اساس تعداد خطوطی که
اضافه یا وارد شدن، پیگیری می‌کنه

343
00:17:07,319 --> 00:17:09,660
اضافه یا درج شده اند، و چند خط

344
00:17:09,660 --> 00:17:11,380
آیا حذف یا پاک شده اند.

345
00:17:11,380 --> 00:17:14,910
و در این مورد، داره به من میگه که نه تا درج در یک فایل وجود داشته،

346
00:17:14,910 --> 00:17:17,040
چون قبلاً، فایل وجود نداشت،

347
00:17:17,040 --> 00:17:20,339
و حالا فایلی که نه خط دارد، وجود دارد.

348
00:17:20,339 --> 00:17:25,329
و حالا من hello.html را در این مخزن گیت ذخیره کردم.

349
00:17:25,329 --> 00:17:29,190
پس حالا ممکنه تصور کنید اگه برگردم به ریپازیتوری گیتم روی وبسایت گیت‌هاب

350
00:17:29,190 --> 00:17:32,670
و اگر صفحه رو رفرش کنم، شاید فایل hello.html رو ببینم،

351
00:17:32,670 --> 00:17:36,150
ولی من رفرش می‌کنم، و هیچ اتفاقی نیفتاد، هیچ‌چیز تغییر نکرد.

352
00:17:36,150 --> 00:17:39,422
فایل hello.html رو نمی‌بینم.

353
00:17:39,422 --> 00:17:41,130
و این به این دلیل است که\nیک مرحله نهایی وجود دارد

354
00:17:41,130 --> 00:17:44,880
اینجا یه چیزی رو قبل از اینکه تغییراتم
به صورت آنلاین اعمال بشن، گم کردم.

355
00:17:44,880 --> 00:17:47,850
به یاد بیاورید که وقتی مرحله‌ی
git clone را اجرا کردم به منظور

356
00:17:47,850 --> 00:17:52,110
برای کلون کردن ریپازیتوری از گیت‌هاب، گیت‌هاب یک نسخه از ریپازیتوری داشت،

357
00:17:52,110 --> 00:17:55,680
و من git clone رو اجرا کردم تا
یک کپی از اون repository رو دانلود کنم

358
00:17:55,680 --> 00:18:00,430
روی کامپیوتر خودم، و وقتی دستور\ngit add رو برای اضافه کردن فایل hello.html اجرا کردم،

359
00:18:00,430 --> 00:18:03,630
یا دستور git commit رو اجرا می‌کردم که بگم، می‌خوام این تغییرات رو ذخیره کنم،

360
00:18:03,630 --> 00:18:08,070
من همیشه فقط روی نسخه‌ی محلی ریپازیتوری‌ام این تغییرات را اعمال می‌کردم.

361
00:18:08,070 --> 00:18:11,160
من هرگز روی چیزی که از قبل در گیت‌هاب بود تاثیری نمی‌گذاشتم.

362
00:18:11,160 --> 00:18:14,670
تغییراتی که من ایجاد می‌کردم فقط در کامپیوتر خودم اتفاق می‌افتاد.

363
00:18:14,670 --> 00:18:17,040
اگر بخوام این تغییرات رو
به گیت‌هاب بفرستم،

364
00:18:17,040 --> 00:18:19,350
پس به چند دستور اضافی\nنیاز خواهم داشت.

365
00:18:19,350 --> 00:18:22,860
و در واقع، ما می‌توانیم ببینیم که در حال حاضر چه چیزی\nدرون مخزن من در حال رخ دادن است

366
00:18:22,860 --> 00:18:25,530
با استفاده از دستوری به نام گیت استاتوس.

367
00:18:25,530 --> 00:18:28,260
و کاری که git status انجام میده اینه، به ما میگه در حال حاضر چه چیزی

368
00:18:28,260 --> 00:18:30,820
اتفاقاتی که داخل ریپازیتوری من می‌افتد را به ما می‌گوید.

369
00:18:30,820 --> 00:18:33,390
خب، برای مثال، اگر قرار بود، در این وضعیت فعلی،

370
00:18:33,390 --> 00:18:36,660
اجرا کنم دستور git status، سپس Git قراره به من گزارش بده

371
00:18:36,660 --> 00:18:40,530
و به من بگه که من
در حال حاضر روی شاخه مستر هستم--

372
00:18:40,530 --> 00:18:42,310
--بعداً بیشتر در مورد شاخه‌ها توضیح می‌دهم--

373
00:18:42,310 --> 00:18:47,700
ولی بعدش داره میگه، شاخه‌ی من یک کامیت از اوریجین مستر جلوتره.

374
00:18:47,700 --> 00:18:50,760
پس این یه راه طولانیه برای گفتن اینکه نسخهٔ محلی من

375
00:18:50,760 --> 00:18:54,240
از ریپازیتوری-- نسخه‌ی ریپازیتوری روی کامپیوترم--

376
00:18:54,240 --> 00:18:57,780
نسخهٔ روی دستگاه من، جلوتر از نسخهٔ اصلی ریپازیتوریه،

377
00:18:57,780 --> 00:19:01,410
نسخهٔ مخزن
که با یک کامیت در گیت‌هاب بالا است،

378
00:19:01,410 --> 00:19:05,640
اینکه من یک کامیت دارم که اوریجین گیت‌هاب نداره.

379
00:19:05,640 --> 00:19:08,580
و به طور مفیدی به من می گوید\nمی توانم از دستور گیت استفاده کنم

380
00:19:08,580 --> 00:19:10,980
برای انتشار کامیت‌های محلی خود، push کنید.

381
00:19:10,980 --> 00:19:13,470
دریافت فشاری از فرمانی که
می‌توانم استفاده کنم تا بگویم،

382
00:19:13,470 --> 00:19:17,310
من می‌خوام تغییراتم رو بردارم و در واقع اون‌ها رو به سرور بفرستم،

383
00:19:17,310 --> 00:19:20,130
آن‌ها را به گیت‌هاب بفرستم تا آن‌جا هم منعکس شوند.

384
00:19:20,130 --> 00:19:22,650
خب، بعد از اینکه وضعیت فعلی خودمان را با git status بررسی کردیم،

385
00:19:22,650 --> 00:19:26,790
ما می توانیم از دستور git push استفاده کنیم تا بگوییم
که اکنون هر تغییری که من

386
00:19:26,790 --> 00:19:31,800
وقتی git push رو اجرا می‌کنم، اون تغییرات به گیت‌هاب فرستاده می‌شن، made, when I run git push, those

387
00:19:31,800 --> 00:19:35,880
بنابراین گیت‌هاب به تمام
کامیت‌هایی که الان انجام دادم، دسترسی داره.

388
00:19:35,880 --> 00:19:38,490
خب، حالا اون دو تا دستور رو امتحان کنیم. git status،

389
00:19:38,490 --> 00:19:42,750
برای دیدن اینکه الان داخل ریپازیتوری من چه خبره، و بعد git push،

390
00:19:42,750 --> 00:19:45,630
که بگم، حالا می‌خوام این تغییرات رو به گیت‌هاب پوش کنم،

391
00:19:45,630 --> 00:19:47,850
به طوری که نسخه آنلاین
مخزن

392
00:19:47,850 --> 00:19:52,020
مطالب نسخه آنلاین\nبا نسخه محلی روی کامپیوترم یکی باشه.

393
00:19:52,020 --> 00:19:52,520
خیلی خب.

394
00:19:52,520 --> 00:19:55,410
خب، الان توی ترمینالم، می‌تونم دستور git status رو اجرا کنم،

395
00:19:55,410 --> 00:19:57,700
و می‌بینم که روی شاخه مسترم، مثل قبل.

396
00:19:57,700 --> 00:19:59,320
و این یک پیام کمی متفاوت است، زیرا آنجا

397
00:19:59,320 --> 00:20:01,500
هیچ چیزی در حال حاضر
داخل ریپازیتوری وجود ندارد،

398
00:20:01,500 --> 00:20:04,110
اما نکته مهم اینجاست که حالا می‌توانم دستور را اجرا کنم

399
00:20:04,110 --> 00:20:06,810
گیت پوش به، مثلاً، برداشتن همه‌ی تغییرات

400
00:20:06,810 --> 00:20:11,300
که من در مخزن خود ایجاد کرده‌ام و پیش برو و آنها را به گیت‌هاب بفرست.

401
00:20:11,300 --> 00:20:13,500
پس تایپ می‌کنم گیت پوش، و اتفاقی که قراره بیفته اینه

402
00:20:13,500 --> 00:20:15,780
قراره فشرده کنه همه‌ی اطلاعات رو،

403
00:20:15,780 --> 00:20:19,410
و این اطلاعات رو فشرده میکنه
و اون رو به این آدرس توی گیت‌هاب میفرسته.

404
00:20:19,410 --> 00:20:24,360
و حالا، اگر برگردم به وبسایت گیت‌هاب، GitHub.com/myrepository،

405
00:20:24,360 --> 00:20:29,020
و اگر صفحه را رفرش کنم، خواهم دید که در واقع الان چیز متفاوتی می‌بینم.

406
00:20:29,020 --> 00:20:31,980
خب، این ظاهر رابط کاربری گیت‌هاب است.

407
00:20:31,980 --> 00:20:33,917
این به من چند تکه اطلاعات می‌دهد.

408
00:20:33,917 --> 00:20:36,750
داره بهم میگه، برای مثال، که یک کامیت در حال حاضر انجام شده

409
00:20:36,750 --> 00:20:38,750
به مخزن -- این همونیه که الان ساختمش --

410
00:20:38,750 --> 00:20:42,610
این روی یک شاخه است، بنابراین اگر من فقط یک شاخه ایجاد کرده باشم، شاخه پیش‌فرض،

411
00:20:42,610 --> 00:20:44,640
ولی بعداً خواهیم دید که چطور شاخه‌های بیشتری ایجاد کنیم.

412
00:20:44,640 --> 00:20:46,770
و، به طور خاص،\nدر پایین، خواهید دید

413
00:20:46,770 --> 00:20:49,790
فایل‌هایی که در حال حاضر داخل این ریپازیتوری وجود دارند را می‌بینید،

414
00:20:49,790 --> 00:20:54,030
که الان من این فایل hello.html رو دارم، که همونیه که من فرستادمش،

415
00:20:54,030 --> 00:20:57,600
و، به‌طور خاص، کنارش پیامِ کامیت هست، پیامی

416
00:20:57,600 --> 00:21:01,020
از آخرین باری که این فایل رو لمس کردم، که به طور خاص

417
00:21:01,020 --> 00:21:05,490
دارد به من می گوید که فایل
hello.html را در آخرین بار اضافه کردم

418
00:21:05,490 --> 00:21:08,550
تعهدی که روی hello.html تأثیر گذاشته است.

419
00:21:08,550 --> 00:21:11,190
و اگر من الان بخوام
روی hello.html کلیک نکنم

420
00:21:11,190 --> 00:21:15,510
برای اینکه واقعاً ببینم داخلش چی هست، محتوای مشابهی رو می‌بینم

421
00:21:15,510 --> 00:21:17,160
همون چیزی رو می‌بینم که قبلاً توی فایل نوشته بودم.

422
00:21:17,160 --> 00:21:19,380
من می‌بینم !DOCTYPE html، و سپس "Hello, world!" را

423
00:21:19,380 --> 00:21:22,070
صفحه‌ای که الان چند باری دیدیمش.

424
00:21:22,070 --> 00:21:25,680
خب، من تغییرات رو روی کامپیوتر خودم اعمال کردم، و الان اون‌ها رو به گیت‌هاب فرستادم،

425
00:21:25,680 --> 00:21:27,770
پس الان داخل این مخزن هستند.

426
00:21:27,770 --> 00:21:29,640
الان عمومی شده،
طوری که هر کس دیگری،

427
00:21:29,640 --> 00:21:33,180
اگر بخواهند در این پروژه همکاری کنند، می‌توانند این آدرس اینترنتی را بردارند،

428
00:21:33,180 --> 00:21:37,990
آن را روی کامپیوتر خود کپی کنند و تغییرات خود را نیز به صورت محلی انجام دهند.

429
00:21:37,990 --> 00:21:41,400
خب حالا می‌توانیم بررسی کنیم که چگونه می‌توانیم
تغییرات بیشتری ایجاد کنیم

430
00:21:41,400 --> 00:21:43,300
همینطور می‌توانیم بررسی کنیم که چگونه می‌توانیم تغییرات بیشتری در این صفحه وب ایجاد کنیم.

431
00:21:43,300 --> 00:21:47,770
بنابراین، برای مثال، اگر بخواهم یک سر تیتر به این صفحه وب اضافه کنم، مثلاً،

432
00:21:47,770 --> 00:21:52,680
ممکنه در بالای بدنه یه چیزی شبیه این بگم، توی یه تگ h1،

433
00:21:52,680 --> 00:21:56,360
"Welcome to my website!"
به وبسایت من خوش آمدید!

434
00:21:56,360 --> 00:21:58,940
و حالا اگه من، فقط برای محکم کاری، فایل hello.html رو باز کنم

435
00:21:58,940 --> 00:22:04,470
برای اینکه ببینم چه شکلی شده، الان صفحه وب من این شکلیه.

436
00:22:04,470 --> 00:22:07,910
و حالا تغییراتی در
فایل hello.html ایجاد کردم، تغییراتی

437
00:22:07,910 --> 00:22:12,020
که هنوز ذخیره نشده‌اند، و من\nمی‌توانم بفهمم که اگر وضعیت گیت را اجرا کنم.

438
00:22:12,020 --> 00:22:14,510
git status ابزار اصلی شما برای این است
که به شما بگوید چه چیزی در حال حاضر

439
00:22:14,510 --> 00:22:17,160
اتفاقاتی که داخل ریپازیتوری شما می‌افتد.

440
00:22:17,160 --> 00:22:20,540
خب، اینجا می‌بینیم "تغییرات برای commit آماده نیستند،"

441
00:22:20,540 --> 00:22:23,960
که یه جور شیک و مجلسی داره میگه، فایل‌هایی که تغییر کردن،

442
00:22:23,960 --> 00:22:27,410
ولی من نگفتم که مایلم تغییراتشون رو
در کامییت بعدی، ثبت کنم.

443
00:22:27,410 --> 00:22:30,500
داره بهم میگه که من hello.html رو تغییر دادم،

444
00:22:30,500 --> 00:22:32,390
ولی این چیزی نیست که گیت در حال حاضر
قرار است پیگیری کند.

445
00:22:32,390 --> 00:22:35,040
قراره دفعه بعدی که ذخیره می‌کنم، پیگیری کنه.

446
00:22:35,040 --> 00:22:38,780
پس اگر بخواهم hello.html را ذخیره کنم
وقتی دفعه بعد کامیت می کنم،

447
00:22:38,780 --> 00:22:42,740
پس اول باید دستور
git add hello.html رو اجرا کنم،

448
00:22:42,740 --> 00:22:44,910
و بعدش می‌تونم git commit رو اجرا کنم.

449
00:22:44,910 --> 00:22:46,910
ولی در واقع یه جورایی یه جور خلاصه نویسی هم اینجا هست.

450
00:22:46,910 --> 00:22:49,940
اگر می‌خواهید همه‌ی فایل‌هایی که تغییر کرده‌اند را اضافه کنید

451
00:22:49,940 --> 00:22:55,250
و برای commit همزمان،\nخلاصه‌اش میشه git commit -am.

452
00:22:55,250 --> 00:22:58,640
یادت باشه، قبلا فقط از m- استفاده می‌کردیم
تا بگیم، یک پیام مشخص کن.

453
00:22:58,640 --> 00:23:02,750
-am یعنی git commit همه‌ی فایل‌هایی که تغییر کرده‌اند--

454
00:23:02,750 --> 00:23:05,180
ای برای همه‌ی -- و همچنین یک پیام ارائه بده.

455
00:23:05,180 --> 00:23:08,450
پس می‌تونید مرحله‌ی `git add` و مرحله‌ی `git commit` رو با هم ترکیب کنید

456
00:23:08,450 --> 00:23:11,600
به این ترتیب، با گفتن اینکه، می‌خوام همه فایل‌ها رو Commit کنم، می‌تونید مرحله‌ی git add و git commit رو با هم ترکیب کنید و به یک مرحله تبدیل کنید.

457
00:23:11,600 --> 00:23:13,820
که تغییر داده‌ام، و سپس یک پیام ارائه خواهم کرد.

458
00:23:13,820 --> 00:23:15,620
دقیقاً چی رو تغییر دادم؟

459
00:23:15,620 --> 00:23:19,020
من یک عنوان اضافه کردم.

460
00:23:19,020 --> 00:23:20,370
من میرم جلو و دکمه Return رو فشار میدم.

461
00:23:20,370 --> 00:23:22,162
این واقعیت را ثبت کرده که من الان

462
00:23:22,162 --> 00:23:24,480
من یک فایل را با یک درج تغییر داده‌ام.

463
00:23:24,480 --> 00:23:28,050
تنها کاری که کردم این بود که یه خط جدید به اون فایل اضافه کردم.

464
00:23:28,050 --> 00:23:32,320
و حالا اگه دستور git status رو اجرا کنم، بهم میگه که من روی شاخه master هستم،

465
00:23:32,320 --> 00:23:34,720
و من از اوریجین مستر جلوترم--

466
00:23:34,720 --> 00:23:36,820
origin master being
the version on GitHub--

467
00:23:36,820 --> 00:23:39,400
با یک کامیت، اینکه من این "اضافه کردن یک عنوان" رو دارم

468
00:23:39,400 --> 00:23:43,810
کامیت، اما در حال حاضر، در
گیت‌هاب، اگر این صفحه را بروزرسانی کنم،

469
00:23:43,810 --> 00:23:48,240
هنوز نسخهٔ قدیمی اون صفحه رو نشون می‌ده.

470
00:23:48,240 --> 00:23:50,850
برای اینکه تغییراتی که روی کامپیوترم دادم رو اعمال کنم

471
00:23:50,850 --> 00:23:54,690
و مطمئن شم که توی گیت‌هاب به‌روز شدن، فقط می‌تونم git push رو اجرا کنم که بگم،

472
00:23:54,690 --> 00:23:58,260
فشار دادن اون تغییرات به
GitHub، و وقتی این کار انجام شد،

473
00:23:58,260 --> 00:24:00,690
حالا می تونم صفحه رو در گیت هاب رفرش کنم، و الان

474
00:24:00,690 --> 00:24:04,470
میبینم که الان گیت‌هاب آخرین نسخهٔ برنامه‌ام را هم دارد.

475
00:24:04,470 --> 00:24:06,080
الان این h1 را دارد.

476
00:24:06,080 --> 00:24:09,570
می‌گوید: «به وبسایت من خوش آمدید!»

477
00:24:09,570 --> 00:24:12,120
پس این git push هست حالا،\nاین قابلیت که من بگم من

478
00:24:12,120 --> 00:24:16,620
می‌خواهم تغییراتی که در ریپازیتوری‌ام
ایجاد کرده‌ام را اعمال کنم

479
00:24:16,620 --> 00:24:19,920
و تغییراتی که در ریپازیتوری خود ایجاد کرده ام را بردارم
و به یک سرور راه دور هل بدهم، سرور راه دور در گیت‌هاب،

480
00:24:19,920 --> 00:24:20,970
برای مثال.

481
00:24:20,970 --> 00:24:23,160
اما ما همچنین می توانیم در جهت مخالف برویم.

482
00:24:23,160 --> 00:24:26,670
ممکنه تصور کنید که شاید\nنسخه‌ای که روی گیت‌هاب هست

483
00:24:26,670 --> 00:24:30,390
اینکه تصور کنید شاید نسخه‌ای که روی\nGitHub هست جدیدتر از نسخه‌ای باشد که من\nروی کامپیوترم دارم، و در این صورت،

484
00:24:30,390 --> 00:24:33,660
من می خواهم آخرین نسخه از ریپازیتوری را که دانلود کنم

485
00:24:33,660 --> 00:24:35,700
چیزی که در حال حاضر در گیت‌هاب وجود دارد.

486
00:24:35,700 --> 00:24:39,360
برای انجام این کار، می‌توانیم از دستوری به نام گیت پول استفاده کنیم.

487
00:24:39,360 --> 00:24:40,320
این چطوری کار میکنه؟

488
00:24:40,320 --> 00:24:43,020
خب، وقتی دستور git pull رو اجرا می‌کنم،\nچه اتفاقی قراره بیفته

489
00:24:43,020 --> 00:24:45,020
برعکس کاری است که گیت پوش انجام داد.

490
00:24:45,020 --> 00:24:49,500
در حالی که git push تغییرات من را در کامپیوترم گرفت و به GitHub منتقل کرد،

491
00:24:49,500 --> 00:24:53,190
گیت پول، مثلاً، تغییراتی رو که در حال حاضر توی گیت‌هاب وجود دارن، میگیره،

492
00:24:53,190 --> 00:24:56,070
و برو جلو و آخرین تغییرات رو بگیر

493
00:24:56,070 --> 00:24:58,650
بنابراین من و نسخه محلی من از مخزن

494
00:24:58,650 --> 00:25:02,280
به آخرین نسخه از کل کدهایی که در حال حاضر

495
00:25:02,280 --> 00:25:03,390
روی گیت‌هاب است.

496
00:25:03,390 --> 00:25:05,560
و ما می‌توانیم این را برای مثال نشان دهیم،

497
00:25:05,560 --> 00:25:08,400
اگر برگردم و نگاهی به خود وبسایت گیت‌هاب بیاندازم،

498
00:25:08,400 --> 00:25:10,800
چون در گیت‌هاب، من در واقع این قابلیت رو دارم

499
00:25:10,800 --> 00:25:13,840
برای ویرایش فایل‌ها با استفاده از رابط گیت‌هاب.

500
00:25:13,840 --> 00:25:17,190
خب، من می خوام شبیه سازی کنم یه نفر دیگه داره روی این پروژه کار می کنه، مثلا.

501
00:25:17,190 --> 00:25:20,190
شاید یه نفر دیگه یه عنوان دوم
اضافه کرده،

502
00:25:20,190 --> 00:25:26,860
پس اونا یه h2 اضافه می‌کنن که می‌گه، فقط سلام، برای مثال.

503
00:25:26,860 --> 00:25:29,760
و بعد، آن‌ها می‌توانند یک پیام کامیت ارائه دهند.

504
00:25:29,760 --> 00:25:33,420
این یه جورایی معادل گرافیکی با m- و بعدش یه پیامه

505
00:25:33,420 --> 00:25:34,830
که قبلاً ارائه کردیم.

506
00:25:34,830 --> 00:25:41,730
آن‌ها می‌توانند بگویند، «h2 اضافه شد،» و سپس کامیت کنند.

507
00:25:41,730 --> 00:25:46,560
پس این یه روش دیگه‌ست برای ویرایش یه گیت ریپازیتوری اینکه به معنای واقعی کلمه توش ویرایش کنی

508
00:25:46,560 --> 00:25:48,190
این هم یک راه دیگر برای ویرایش یک ریپازیتوری گیت است، اینکه آن را مستقیماً در رابط گیت‌هاب ویرایش کنیم.

509
00:25:48,190 --> 00:25:50,880
خب، گیت‌هاب به شما اجازه میده
که فقط یک فایل رو ویرایش کنید،

510
00:25:50,880 --> 00:25:54,060
و بعد هر خطی رو اضافه یا ویرایش کنید.

511
00:25:54,060 --> 00:25:58,110
خب حالا نسخه‌ی موجود در گیت‌هاب، در واقع با نسخه‌ای که

512
00:25:58,110 --> 00:26:01,620
که ما روی کامپیوترمون داریم، اینکه اگه به hello.html نگاه کنیم

513
00:26:01,620 --> 00:26:05,340
اینجا من فقط h1 رو می‌بینم،
و h2 رو که

514
00:26:05,340 --> 00:26:08,370
چون یک
کامیت جدیدتره که هنوز بهش
دسترسی ندارم.

515
00:26:08,370 --> 00:26:09,750
بهش دسترسی ندارم.

516
00:26:09,750 --> 00:26:13,350
ولی اگر بخواهم آن کامیت را دانلود کنم، آنوقت چه بگویم

517
00:26:13,350 --> 00:26:18,510
داخل ترمینال خودم هست، میتونم بگم git pull تا دانلودش کنم،

518
00:26:18,510 --> 00:26:19,470
و بسیار خب.

519
00:26:19,470 --> 00:26:21,210
یک فایل به روز شده است.

520
00:26:21,210 --> 00:26:22,630
یه تغییراتی ایجاد کرده.

521
00:26:22,630 --> 00:26:25,290
و حالا، اگه برگردم به فایل، شما

522
00:26:25,290 --> 00:26:28,740
متوجه می‌شید که به صورت خودکار الان آخرین نسخه فایل رو دارم.

523
00:26:28,740 --> 00:26:31,170
من الان این h2 رو دارم که میگه "سلام!"

524
00:26:31,170 --> 00:26:35,460
چون آخرین نسخه فایل رو از گیت‌هاب گرفتم.

525
00:26:35,460 --> 00:26:38,280
پس از طریق ترکیب گیت پوش و گیت پول،

526
00:26:38,280 --> 00:26:41,250
من می توانم تغییراتی در کد خود ایجاد کنم
تا آنها را به GitHub منتقل کنم،

527
00:26:41,250 --> 00:26:44,370
و همچنین دسترسی پیدا کنم به
آخرین نسخه کدی که

528
00:26:44,370 --> 00:26:46,557
که از قبل روی گیت‌هاب هست.

529
00:26:46,557 --> 00:26:48,390
ولی وقتی این کار را انجام می دهیم، ممکن است تصور کنید که ما

530
00:26:48,390 --> 00:26:50,850
ممکنه تصور کنید که به نوعی مشکل بر بخوریم.

531
00:26:50,850 --> 00:26:52,830
به طور خاص، ممکن است به یک مشکل
بر بخوریم

532
00:26:52,830 --> 00:26:56,280
اگر من تغییراتی در کد خودم ایجاد کرده باشم، و شخص دیگری

533
00:26:56,280 --> 00:27:00,010
اگر من تغییراتی در کد خود ایجاد کرده باشم، و شخص دیگری که روی همان پروژه من کار می‌کند نیز تغییراتی در کد ایجاد کرده باشد.

534
00:27:00,010 --> 00:27:04,080
چه اتفاقی میفته اگه ما هر دو تغییراتی
در قسمت یکسانی از کد ایجاد کنیم

535
00:27:04,080 --> 00:27:05,850
و بعد سعی کنیم کارمان را با هم
هماهنگ کنیم، چه اتفاقی می‌افتد؟

536
00:27:05,850 --> 00:27:07,073
چه اتفاقی خواهد افتاد؟

537
00:27:07,073 --> 00:27:09,240
خب، قراره به یه جور درگیری برخورد کنیم،

538
00:27:09,240 --> 00:27:11,520
چون من تغییراتی در همون خط ایجاد کردم

539
00:27:11,520 --> 00:27:14,910
که همکارم تغییراتی در آن ایجاد کرده
تغییراتی در آن ایجاد کرده است، و این نوع تضاد

540
00:27:14,910 --> 00:27:16,890
یک تداخل ادغام نامیده می شود، که هنگام تلاش

541
00:27:16,890 --> 00:27:20,100
برای ادغام تغییرات من با تغییراتی که شخص دیگری ایجاد کرده است،

542
00:27:20,100 --> 00:27:23,830
ما به وضعیتی برمی‌خوریم که ناگهان گیت نمی‌داند چه کار کند.

543
00:27:23,830 --> 00:27:25,740
آن‌ها دو دسته تغییرات متفاوت هستند، و ما

544
00:27:25,740 --> 00:27:28,770
لازمه بفهمیم چطور اینها رو حل کنیم و چه کار باید بکنیم

545
00:27:28,770 --> 00:27:30,905
وقتی با این نوع تعارض روبرو میشیم.

546
00:27:30,905 --> 00:27:32,280
خب، این اتفاقی هست که قراره بیفته.

547
00:27:32,280 --> 00:27:34,820
اگر تا حالا با این جور
تداخل ادغام برخوردیم،

548
00:27:34,820 --> 00:27:38,550
معمولاً اگه من بخوام یه سری تغییرات رو pull یا merge کنم این اتفاق میفته.

549
00:27:38,550 --> 00:27:39,580
از جای دیگری.

550
00:27:39,580 --> 00:27:43,080
خب، فرض کنیم من دستور git pull رو اجرا کنم، اما یه سری کامیت‌های conflict وجود داشته باشه،

551
00:27:43,080 --> 00:27:46,380
یه چیزی که آنلاینه و با نسخه فعلیم تضاد داره

552
00:27:46,380 --> 00:27:47,760
از ریپازیتوری.

553
00:27:47,760 --> 00:27:49,920
چیزی که دریافت می‌کنم پیامی شبیه این خواهد بود.

554
00:27:49,920 --> 00:27:53,580
یه جور تضاد میگه، تضادهای ادغام\nدر یک سری فایل با شکست مواجه شده.

555
00:27:53,580 --> 00:27:57,630
شما باید تعارضات را رفع کنید
و سپس نتایج را ثبت کنید.

556
00:27:57,630 --> 00:27:59,640
پس این تضادها ممکنه چه شکلی باشن؟

557
00:27:59,640 --> 00:28:02,640
خب، معمولاً، فایل یه چیزی شبیه این خواهد بود.

558
00:28:02,640 --> 00:28:06,390
گیت به طور خودکار مقداری فراداده به فایل اضافه خواهد کرد

559
00:28:06,390 --> 00:28:08,790
تا چیزهایی را توصیف کند که
نمی‌تواند درست تشخیص دهد،

560
00:28:08,790 --> 00:28:10,830
و این مقدار زیادی اطلاعات\nبه نظر مبهم و گیج کننده است،

561
00:28:10,830 --> 00:28:13,680
اما می‌توانیم آن را به چند بخش اصلی تقلیل دهیم.

562
00:28:13,680 --> 00:28:17,730
هر چیزی بین این
فلش‌ها در بالا و علامت‌های مساوی

563
00:28:17,730 --> 00:28:20,400
اینجا تغییرات شما هست، تغییراتی که من ایجاد کردم

564
00:28:20,400 --> 00:28:23,550
ایجاد شده روی نسخه من از ریپازیتوری که به نوعی

565
00:28:23,550 --> 00:28:25,920
متعارض با برخی تغییرات دیگر هستند.

566
00:28:25,920 --> 00:28:28,740
همه‌چیز بین این
علامت مساوی‌ها و این فلش‌ها

567
00:28:28,740 --> 00:28:32,190
این پایین تغییرات راه دور هستند، تغییرات از گیتهاب

568
00:28:32,190 --> 00:28:35,130
که من دارم سعی می کنم اونها رو بکشم تو که یه جورایی با چیزی که conflict دارن

569
00:28:35,130 --> 00:28:36,940
من در حال حاضر روی آن کار کرده‌ام.

570
00:28:36,940 --> 00:28:39,000
و بعد این توالی از اعداد\nو حروف

571
00:28:39,000 --> 00:28:42,780
اینجا هشِ کامیتِ
متعارض هست.

572
00:28:42,780 --> 00:28:47,490
پس هر کامنت یه هش میگیره، فقط یه دنباله‌ای از اعداد و کاراکترها.

573
00:28:47,490 --> 00:28:51,510
که به احتمال زیاد منحصر به فرد است و به
برای شناسایی هر کامیت خاص کمک می‌کند،

574
00:28:51,510 --> 00:28:55,200
و گیت به طور خودکار هر بار که کامنتی می‌گذارید، یک هش ایجاد می‌کند،

575
00:28:55,200 --> 00:28:59,040
و خواهیم دید که چطور می‌توانید
نگاهی به همه‌ی اون کامیت‌های ممکن بندازید.

576
00:28:59,040 --> 00:29:01,170
ولی اینجا دوباره، فقط داره با مهربانی بهمون میگه،

577
00:29:01,170 --> 00:29:05,850
این کامیت همونه که باعث این تداخله، فقط برای اطلاع خودمون.

578
00:29:05,850 --> 00:29:08,790
برای رفع این تداخل ادغام، روشی که ما انجام می‌دهیم این است که

579
00:29:08,790 --> 00:29:11,610
اول باید همه‌ی این نشانه‌های
تداخل ادغام را حذف کنیم که

580
00:29:11,610 --> 00:29:15,600
وجود دارند در فایل متنی و تصمیم بگیریم که چه چیزی

581
00:29:15,600 --> 00:29:17,400
می‌خواهیم به عنوان راه‌حل این درگیری چه چیزی داشته باشیم.

582
00:29:17,400 --> 00:29:20,010
خب، شاید بخوام نسخه تغییرات خودم رو نگه دارم؛

583
00:29:20,010 --> 00:29:23,010
شاید بخواهم نسخه راه دور تغییرات را نگه دارم، تغییراتی که

584
00:29:23,010 --> 00:29:25,500
برای مثال، یا شاید می‌خواهم تغییراتی را که از قبل روی گیت‌هاب بودند، نگه دارم؛ یا شاید من

585
00:29:25,500 --> 00:29:27,590
می‌خوام اون‌ها رو یه جور هوشمندانه با هم ترکیب کنم.

586
00:29:27,590 --> 00:29:29,430
من، برنامه‌نویس، باید این تصمیم را بگیرم.

587
00:29:29,430 --> 00:29:32,370
من باید به نسخه‌ی خودم نگاه کنم
و نسخه‌ی دارای تداخل

588
00:29:32,370 --> 00:29:35,610
و تصمیم می‌گیرم چطور اون تضاد رو حل کنم.

589
00:29:35,610 --> 00:29:39,000
خطوط خالی رو حذف می‌کنم و بعد تغییرات رو ثبت می‌کنم تا بگم،

590
00:29:39,000 --> 00:29:43,960
این چیزیه که میخوام نسخهٔ ادغام‌شدهٔ این برنامه این شکلی بشه.

591
00:29:43,960 --> 00:29:47,922
خب، حالا بیاین یه نگاهی به یه مثال از یه تداخل ادغام در عمل بندازیم،

592
00:29:47,922 --> 00:29:50,130
تا ببینیم چطور ممکنه اتفاق بیفته، و چطور ممکنه واقعا

593
00:29:50,130 --> 00:29:54,340
برویم سراغ اینکه چطور با یه تداخل ادغام، اگر اتفاق بیفتد، برخورد کنیم.

594
00:29:54,340 --> 00:29:59,760
خب، من الان روی کامپیوترم، می‌خوام یه تغییری توی این صفحه ایجاد کنم.

595
00:29:59,760 --> 00:30:01,980
می‌خوام بگم، یه علامت تعجب دیگه اضافه کن.

596
00:30:01,980 --> 00:30:03,810
یه دونه علامت تعجب کافی نبود.

597
00:30:03,810 --> 00:30:06,878
یه علامت تعجب دوم هم به این h1 اضافه می‌کنم،

598
00:30:06,878 --> 00:30:08,670
و من میرم جلو و اون تغییرات رو ثبت می‌کنم.

599
00:30:08,670 --> 00:30:14,438
می‌گم گیت کامیت -اِی‌اِم "اضافه کردن علامت تعجب،"

600
00:30:14,438 --> 00:30:16,230
و من پیش میرم و اون تغییرات رو commit می‌کنم.

601
00:30:16,230 --> 00:30:18,240
من این نسخه جدید برنامه را ذخیره کرده‌ام.

602
00:30:18,240 --> 00:30:20,340
ولی هنوز کد رو بارگذاری نمیکنم.

603
00:30:20,340 --> 00:30:22,980
در عوض، کاری که می‌خواهم انجام دهم این است که شخص دیگری را شبیه‌سازی کنم

604
00:30:22,980 --> 00:30:24,480
درحالی‌که، کاری که می‌خواهم انجام دهم، شبیه‌سازی شخص دیگری است که روی همان فایل کار می‌کند.

605
00:30:24,480 --> 00:30:27,600
شاید یه نفر دیگه تو گیت‌هاب تصمیم گرفته، می‌دونی چیه؟

606
00:30:27,600 --> 00:30:30,150
برای این تگ اچ یک، کاری که واقعاً دوست داریم انجام بدیم اینه که

607
00:30:30,150 --> 00:30:33,270
اضافه کنیم یه استایلی بهش با یه استایل درون خطی با گفتن،

608
00:30:33,270 --> 00:30:36,780
بیاین بهش یه رنگ آبی بدیم، مثلا.

609
00:30:36,780 --> 00:30:39,410
پس مقداری سی‌اس‌اس اضافه کرده‌اند.

610
00:30:39,410 --> 00:30:41,160
ما جلو میریم و یه پیغام کامیت می‌نویسیم.

611
00:30:41,160 --> 00:30:41,868
آن‌ها چه کار کردند؟

612
00:30:41,868 --> 00:30:43,530
آنها کمی استایل اضافه کردند.

613
00:30:43,530 --> 00:30:46,050
و ما اون تغییرات رو ثبت می کنیم.

614
00:30:46,050 --> 00:30:48,170
و حالا چیزی که ما ایجاد کردیم چیزی است که دارد

615
00:30:48,170 --> 00:30:52,430
قرار است یک تداخل ادغام باشد، که شخص دیگری در گیت‌هاب

616
00:30:52,430 --> 00:30:56,240
تغییری در این خط ایجاد کرده، رنگ را به آبی تغییر داده است

617
00:30:56,240 --> 00:31:00,050
از این تگ h1 خاص، به عنوان مثال، و در همین حال

618
00:31:00,050 --> 00:31:03,860
من همچنین تغییری در همان خط ایجاد کرده ام، و یک علامت تعجب اضافه کردم.

619
00:31:03,860 --> 00:31:07,610
و گیت کاملاً بر اساس اضافه کردن خطوط و حذف کردن خطوط عمل می‌کند.

620
00:31:07,610 --> 00:31:10,090
با توجه به اینکه ما هر دو تغییراتی\nدر یک خط ایجاد کردیم،

621
00:31:10,090 --> 00:31:12,230
گیت قراره خیلی سخت بتونه بفهمه

622
00:31:12,230 --> 00:31:15,020
چه کاری باید در این سناریو انجام دهد.

623
00:31:15,020 --> 00:31:17,560
خب اینجا در ترمینالم، میرم جلو و git pull رو اجرا میکنم،

624
00:31:17,560 --> 00:31:21,280
چون می‌خوام آخرین تغییرات رو دریافت کنم، و وقتی این کار رو انجام بدم،

625
00:31:21,280 --> 00:31:23,160
من اون رو می بینم، خیلی خب، این پیام رو دریافت می کنم.

626
00:31:23,160 --> 00:31:26,950
تداخل: در hello.html یک تداخل ادغام وجود داشت.

627
00:31:26,950 --> 00:31:29,440
ادغام خودکار انجام نشد، چون معمولاً گیت ما

628
00:31:29,440 --> 00:31:31,690
سعی می‌کنیم فایل‌ها رو به‌صورت خودکار ادغام کنیم، اگه بتونم،

629
00:31:31,690 --> 00:31:36,310
ولی بعضی وقتا نمیشه، برای همین الان باید تداخل‌ها رو درست کنم

630
00:31:36,310 --> 00:31:39,360
و سپس نتایج را ثبت می‌کنم.

631
00:31:39,360 --> 00:31:43,185
خب، بیاین یه نگاهی بندازیم به اینکه داخل hello.html چیه،

632
00:31:43,185 --> 00:31:45,560
و چیزی که متوجه خواهید شد این است که
تعدادی زیادی از این نشانه‌ها وجود دارند،

633
00:31:45,560 --> 00:31:48,080
و ویرایشگر متن من اتفاقاً آنها را برای من برجسته می کند،

634
00:31:48,080 --> 00:31:49,955
طوری که بتونم اون‌ها رو یه کم واضح‌تر ببینم،

635
00:31:49,955 --> 00:31:52,590
اما این فقط هایلایت کردنیه که ویرایشگر متن فراهم کرده.

636
00:31:52,590 --> 00:31:54,710
این در واقع بخشی از خود متن نیست.

637
00:31:54,710 --> 00:31:58,220
اما متوجه خواهید شد که همه این فلش ها، و سپس همه این اضلاع مساوی،

638
00:31:58,220 --> 00:32:01,340
و در این بین، این نسخه من از این خط است

639
00:32:01,340 --> 00:32:06,480
از کد، خط کدی که علامت تعجب اضافه در انتهای آن وجود دارد.

640
00:32:06,480 --> 00:32:10,050
پایین، این نسخه راه دورِ دارای اختلاف است

641
00:32:10,050 --> 00:32:13,140
از همان کد، نسخه‌ای که در
در زیر، در اینجا نسخه‌ی ریموتِ مغایر

فایلِ حذف شده در گیت‌هاب تغییر کرده است، نسخه‌ای که اکنون من
سعی می‌کنم آن را دریافت کنم.
===>
از همان کد، نسخه‌ای که در
فایلِ حذف شده در گیت‌هاب تغییر کرده است، نسخه‌ای که اکنون من

642
00:32:13,140 --> 00:32:14,280
دارم تلاش می‌کنم بکشمش تو.

643
00:32:14,280 --> 00:32:18,570
این نسخه‌ای است که می‌گوید،
ما رنگ آبی استایل را در داخل می‌خواهیم

644
00:32:18,570 --> 00:32:22,148
از استایل اینلاین برای این المنت اچ ۱.

645
00:32:22,148 --> 00:32:23,940
و حالا کاری که باید انجام بدم اینه که یه جوری بفهمم

646
00:32:23,940 --> 00:32:26,650
باید یه جوری این دوتا رو با هم ادغام کنم.

647
00:32:26,650 --> 00:32:28,990
چطور می‌خواهم این تداخل را حل کنم؟

648
00:32:28,990 --> 00:32:30,930
خب، در این مورد خاص، شاید دوست داشته باشم

649
00:32:30,930 --> 00:32:34,560
که این اختلاف رو با گرفتن بهترینِ هر دو دنیا حل کنم.

650
00:32:34,560 --> 00:32:38,730
اگر شخصی در گیتهاب می‌خواست یک
ویژگی استایل به این تگ اچ‌وان اضافه کند،

651
00:32:38,730 --> 00:32:41,880
و اگر من علامت تعجب اضافه\nمی‌خواستم، هر دو را می‌توانم انجام دهم.

652
00:32:41,880 --> 00:32:45,880
میتونم برم جلو و فقط یه علامت تعجب اضافه کنم،

653
00:32:45,880 --> 00:32:50,700
و بعد ورژن خودمو حذف کنم، و بعد این نشانگرهای کامیت رو هم حذف کنم.

654
00:32:50,700 --> 00:32:52,590
پس برو جلو و اونها رو حذف کن.

655
00:32:52,590 --> 00:32:55,720
من اساساً فایل رو تغییر میدم
تا زمانی که ازش راضی بشم

656
00:32:55,720 --> 00:32:57,720
تا وقتی که فکر کنم، خب، این همون طوریه که من

657
00:32:57,720 --> 00:32:59,520
می‌خواستم اینجوری اختلاف رو حل کنم.

658
00:32:59,520 --> 00:33:01,080
یه نفر رنگ اضافه کرد.

659
00:33:01,080 --> 00:33:02,970
یک نفر سپس علائم نگارشی را اضافه کرد.

660
00:33:02,970 --> 00:33:05,580
راه حلش تو این مورد اینه که از هر دوتاشون استفاده کنی.

661
00:33:05,580 --> 00:33:07,710
اما اینجاست که مقداری شهود انسانی وارد می‌شود.

662
00:33:07,710 --> 00:33:10,860
برنامه‌نویس انسانی نیازی ندارد که به این فایل نگاه کند و متوجه شود،

663
00:33:10,860 --> 00:33:13,710
دقیقا چطور می‌خوایم این اختلاف رو حل کنیم؟

664
00:33:13,710 --> 00:33:16,650
چطور می‌خواهیم بفهمیم چطور این تغییرات مختلف رو اعمال کنیم

665
00:33:16,650 --> 00:33:18,960
و چطور می‌خواهیم بفهمیم که چطور این تغییرات مختلف را
با هم ادغام کنیم؟

666
00:33:18,960 --> 00:33:22,530
ولی وقتی ازش راضی شدیم، میتونیم بریم جلو و نتیجه رو ثبت کنیم.

667
00:33:22,530 --> 00:33:27,090
میتونم بگم git commit -am "رفع مشکل ادغام،"

668
00:33:27,090 --> 00:33:29,280
و خب، ما مشکل ادغام رو حل کردیم.

669
00:33:29,280 --> 00:33:36,180
و حالا، اگه من این نتایج رو
دوباره به گیت‌هاب پوش کنم، وقتی که این کار انجام شد

670
00:33:36,180 --> 00:33:40,920
و صفحه رو رفرش کنم، الان خط کد به‌روزرسانی‌شده رو در گیتهاب می‌بینم،

671
00:33:40,920 --> 00:33:45,630
با تگ h1 که هم استایل درون‌خطی\nرا دارد و هم نقطه‌گذاری اضافه،

672
00:33:45,630 --> 00:33:47,550
چون مشکل ادغام رو حل کردم،

673
00:33:47,550 --> 00:33:52,403
و بعد اون اطلاعات رو هم به گیت‌هاب فرستادم.

674
00:33:52,403 --> 00:33:55,570
چند دستور گیت دیگه هم وجود داره که دونستنشون مفیده.

675
00:33:55,570 --> 00:33:57,778
منظورم اینه که خیلی [دستورات] وجود داره، اما
ما در مورد چندتاشون صحبت خواهیم کرد

676
00:33:57,778 --> 00:33:59,970
در حال حاضر، اولینِ اونها git log هست.

677
00:33:59,970 --> 00:34:03,162
git log اگر بخواهید رد تمام تغییراتی را که ایجاد کرده‌اید، نگه دارید، مفید است

678
00:34:03,162 --> 00:34:05,120
که شما در کد خود ایجاد کرده اید، می خواهید نگه دارید

679
00:34:05,120 --> 00:34:06,870
ردیابی تمام کامیت‌هایی که
شده است

680
00:34:06,870 --> 00:34:08,790
ساخته شده در این مخزن خاص.

681
00:34:08,790 --> 00:34:11,460
فقط کافیه دستور git log رو اجرا کنید،

682
00:34:11,460 --> 00:34:13,440
و گیت یه عالمه پیام بیرون میده

683
00:34:13,440 --> 00:34:16,810
که شبیه این به نظر می رسند، که هر کدام از نظرات شما را برای هر commit توضیح می دهند.

684
00:34:16,810 --> 00:34:19,230
به شما می‌گوید که هش کامیت چیست، همچین

685
00:34:19,230 --> 00:34:22,679
که بتونید راحت‌تر بهش ارجاع بدید، بهتون میگه چه کسی اون تغییر رو ایجاد کرده،

686
00:34:22,679 --> 00:34:25,110
به شما تاریخ انجام آن کامیت را خواهد گفت،

687
00:34:25,110 --> 00:34:27,560
و همچنین پیام کامیت را به شما می گوید.

688
00:34:27,560 --> 00:34:31,139
پس اگر لازم دارید خیلی سریع نگاهی به عقب بیاندازید
و ببینید در چه روزی این ویژگی

689
00:34:31,139 --> 00:34:33,880
اضافه شده یا چه کسی این قسمت را به صفحه وب اضافه کرده،

690
00:34:33,880 --> 00:34:37,239
میتونید توی گیت لاگ بگردید، کامیت مورد نظر رو پیدا کنید،

691
00:34:37,239 --> 00:34:40,920
و بعدش می‌فهمید که این اتفاق تو کدوم کامیت افتاده.

692
00:34:40,920 --> 00:34:42,690
همچنین اگر متوجه شوید که

693
00:34:42,690 --> 00:34:44,850
تغییری ایجاد کردید که منظورتان \nنبوده، و شما

694
00:34:44,850 --> 00:34:46,489
می‌خواید به یک کامیت قبلی برگردید.

695
00:34:46,489 --> 00:34:48,489
پس، در این صورت، شما\nمی‌توانید از یک دستور به نام استفاده کنید

696
00:34:48,489 --> 00:34:52,139
برای بازگردانی گیت، که تعدادی روش مختلف برای استفاده دارد،

697
00:34:52,139 --> 00:34:55,830
ولی git reset در واقع وضعیت فعلی ریپازیتوری را می گیرد

698
00:34:55,830 --> 00:35:00,040
و آن را به حالت قدیمی‌تر مخزن برمی‌گرداند، برای مثال.

699
00:35:00,040 --> 00:35:02,340
خب، چند راه برای استفاده ازش وجود داره مثل این.

700
00:35:02,340 --> 00:35:08,160
میتونید git reset --hard رو انجام بدید، یعنی هارد ریست، همه چیز رو ریست کنید، برگردید به--

701
00:35:08,160 --> 00:35:10,500
و بعدش می‌تونی یه هش کامیت رو وارد کنی.

702
00:35:10,500 --> 00:35:12,660
پس git log، همانطور که شاید از قبل به یاد بیاورید،

703
00:35:12,660 --> 00:35:16,020
به شما هش‌های کامیت را برای هر یک از کامیت‌های مختلف داد.

704
00:35:16,020 --> 00:35:20,880
اگر بخواهم به یک کامیت خاص برگردم، می‌توانم بگویم git reset --hard

705
00:35:20,880 --> 00:35:24,390
و بعد هش کامیت که می‌خوام بهش برگردم،

706
00:35:24,390 --> 00:35:26,100
و به آن کامیت برمی‌گردم.

707
00:35:26,100 --> 00:35:31,350
از طرف دیگر، می‌توانم چیزی شبیه این بگویم: git reset --hard origin/master.

708
00:35:31,350 --> 00:35:35,190
و به یاد داشته باشید که مبدا/مستر
نسخه مخزن من است

709
00:35:35,190 --> 00:35:36,630
که در حال حاضر روی GitHub است.

710
00:35:36,630 --> 00:35:39,300
پس اگر بخواهم نسخه فعلی ریپازیتوری خودم را بردارم

711
00:35:39,300 --> 00:35:41,490
و بازنشانی آن به
هر چیزی که در گیت‌هاب است،

712
00:35:41,490 --> 00:35:44,800
بعدش می‌تونم از یه دستوری مثل این استفاده کنم تا این کار رو انجام بدم.

713
00:35:44,800 --> 00:35:47,310
پس شما git reset رو اجرا می‌کنید، بعدش یه هش کامیت،

714
00:35:47,310 --> 00:35:51,960
و این وضعیت فعلی مخزن شما را به هر وضعیتی که بوده، بازنشانی می‌کند

715
00:35:51,960 --> 00:35:53,487
آن در حالت قبلی قرار داشت.

716
00:35:53,487 --> 00:35:55,320
و تعدادی دستور گیت دیگر
هم وجود دارد

717
00:35:55,320 --> 00:35:57,028
همچنین، اون‌ها هم میتونن
وقتی که شما شروع میکنید، خیلی کمک کننده باشند

718
00:35:57,028 --> 00:35:59,460
شروع به کار با پروژه های بزرگتر
و بزرگتر میکنید،

719
00:35:59,460 --> 00:36:02,210
اما اینها برخی از مفیدترین هستند، و برخی دیگر که

720
00:36:02,210 --> 00:36:05,460
استفاده می کنید اغلب فقط اضافه کردن فایل هایی است که می خواهید پیگیری کنید;

721
00:36:05,460 --> 00:36:07,470
git commit to say, I
would like to make a save,

722
00:36:07,470 --> 00:36:10,680
می‌خوام وضعیت فعلی همه‌ی این فایل‌ها رو ذخیره کنم؛ پوش

723
00:36:10,680 --> 00:36:14,550
و بتونم تغییرات رو بارگذاری کنم و تغییراتی که اعمال شده رو دانلود کنم

724
00:36:14,550 --> 00:36:18,600
ساخته شده به مخزن شما؛ و سپس برخی از
دستورات مفید مانند تنظیم مجدد و ورود به سیستم

725
00:36:18,600 --> 00:36:19,410
و وضعیت،

726
00:36:19,410 --> 00:36:21,870
فقط برای اینکه اطلاعاتی دربارهٔ مخزن‌تان به شما بدهم.

727
00:36:21,870 --> 00:36:26,880
و در صورت نیاز، شما را به حالت قدیمی‌تری از ریپازیتوری برگرداند.

728
00:36:26,880 --> 00:36:29,760
اما وقتی شروع به کار روی پروژه های بیشتر و بیشتری می کنیم،

729
00:36:29,760 --> 00:36:32,550
مخصوصاً وقتی شروع می‌کنیم به کار روی پروژه‌های پیچیده‌تر،

730
00:36:32,550 --> 00:36:34,350
ممکنه متوجه بشید که فقط
ردیابی یک

731
00:36:34,350 --> 00:36:38,710
تغییر پشت سر هم، آنقدر که فکر می‌کنید قوی نباشد.

732
00:36:38,710 --> 00:36:41,910
و بنابراین می‌توانیم بررسی کنیم که در یک موقعیت فرضی چه اتفاقی ممکن است بیفتد

733
00:36:41,910 --> 00:36:46,120
جایی که شما شروع به ایجاد برخی تغییرات در یک ریپازیتوری گیت می‌کنید، برای مثال.

734
00:36:46,120 --> 00:36:49,020
خب، بیایید تصور کنیم اولین کامیت خودتون رو انجام میدید، یه سری تغییرات انجام میدید،

735
00:36:49,020 --> 00:36:51,210
شما تغییرات بیشتری ایجاد می کنید، و شاید

736
00:36:51,210 --> 00:36:55,350
شما متوجه می‌شوید که می‌خواهید کار روی یک ویژگی جدید را برای این برنامه وب شروع کنید.

737
00:36:55,350 --> 00:36:56,560
که روی آن کار کرده‌اید.

738
00:36:56,560 --> 00:36:58,830
پس شروع می‌کنی به کار\nروی یک قابلیت جدید، بعد

739
00:36:58,830 --> 00:37:00,840
شما به کار روی اون ویژگی جدید ادامه میدید،

740
00:37:00,840 --> 00:37:02,910
ولی بعد یهو متوجه میشی، میدونی چیه،

741
00:37:02,910 --> 00:37:06,720
یه باگی توی کد اصلی وجود داشت که خیلی وقت پیش اینجا نوشته بودمش،

742
00:37:06,720 --> 00:37:08,790
و تو می‌خوای برگردی
و اون باگ رو درست کنی،

743
00:37:08,790 --> 00:37:11,760
ولی الان یه جورایی تو یه وضعیت پیچیده‌ای قرار گرفتیم، که می‌خوایم باگ رو رفع کنیم،

744
00:37:11,760 --> 00:37:13,930
ولی ما در میانهٔ کار روی یک قابلیت جدید هستیم.

745
00:37:13,930 --> 00:37:14,638
پس چیکار کنیم؟

746
00:37:14,638 --> 00:37:17,340
میتونیم برگردیم به این
و سعی کنیم باگ رو برطرف کنیم،

747
00:37:17,340 --> 00:37:19,470
ولی بعدش چه اتفاقی برای قابلیت جدید میفته؟

748
00:37:19,470 --> 00:37:23,220
مشکل اینه که این ساختار، فقط تغییر پشت تغییر پشت تغییر--

749
00:37:23,220 --> 00:37:24,680
خیلی خطی است.

750
00:37:24,680 --> 00:37:27,610
فقط پشت سر هم یکی بعد از دیگری می‌رود.

751
00:37:27,610 --> 00:37:29,670
و اغلب اوقات، وقتی داری روی پروژه‌ای کار می‌کنی،

752
00:37:29,670 --> 00:37:32,130
قرار نیست به صورت خیلی خطی عمل کنه.

753
00:37:32,130 --> 00:37:34,620
شما همیشه روی یک چیزی که بلافاصله کار نمی‌کنید

754
00:37:34,620 --> 00:37:35,970
دنبال چیزی که قبلش بوده نمیری.

755
00:37:35,970 --> 00:37:39,780
شما ممکن است در حین کار بر روی چندین ویژگی جدید، در حال رفع چندین باگ باشید،

756
00:37:39,780 --> 00:37:42,690
و شما یک راهی را می‌خواهید که قادر باشید روی همه‌ی آن چیزها کار کنید

757
00:37:42,690 --> 00:37:46,830
به‌طور همزمان، و این‌که بتونی راحت بین‌شون جابه‌جا شی.

758
00:37:46,830 --> 00:37:49,380
و بنابراین اینجاست که انشعاب به کار می آید.

759
00:37:49,380 --> 00:37:52,290
شاخه ها روش Git برای کار کردن روی قسمت های مختلف هستند

760
00:37:52,290 --> 00:37:55,140
از مخزن به‌طور همزمان.

761
00:37:55,140 --> 00:37:58,560
و بنابراین ممکن است موقعیتی را تصور کنید
که بیشتر در این راستا آشکار می‌شود.

762
00:37:58,560 --> 00:38:01,887
اولین کامیت خودت رو انجام میدی، شروع می‌کنی به ایجاد تغییرات، تغییرات بیشتری ایجاد می‌کنی،

763
00:38:01,887 --> 00:38:03,720
و وقتی تصمیم می‌گیری
که بخوای شروع کنی

764
00:38:03,720 --> 00:38:09,150
برای مثال، وقتی تصمیم می‌گیرید که روی یک ویژگی جدید کار کنید، به جای اینکه تغییرات را در یکی

765
00:38:09,150 --> 00:38:12,750
بعد از دیگری بعد از دیگری روی این شاخه، به اصطلاح،

766
00:38:12,750 --> 00:38:14,340
میتونم یه شاخه جدید درست کنم.

767
00:38:14,340 --> 00:38:16,350
میتونم انشعاب بگیرم و بگم، میدونی چیه؟

768
00:38:16,350 --> 00:38:19,810
بیاین یه شاخه جدید درست کنیم و شروع کنیم
اونجا روی قابلیت جدیدمون کار کنیم،

769
00:38:19,810 --> 00:38:22,150
و بعد به کار روی
همان ویژگی جدید در آنجا ادامه می‌دهیم.

770
00:38:22,150 --> 00:38:24,300
و اگه بعداً متوجه بشم در ادامه راه که، تو

771
00:38:24,300 --> 00:38:27,270
می‌دونی چیه، یه باگ وجود داشت\nخیلی وقت پیش توی این کامیت، بعدش

772
00:38:27,270 --> 00:38:30,630
میتونم به این کامیت برگردم و یه شاخه جدید بسازم، جایی که پیش برم

773
00:38:30,630 --> 00:38:31,860
و اون باگ رو رفع کنم.

774
00:38:31,860 --> 00:38:35,370
و حالا دو شاخه‌ی مختلف دارم، که هرکدام

775
00:38:35,370 --> 00:38:38,850
ممکنه کد متفاوتی روش باشه، یکیشون رو داشتم یه باگ رو درست میکردم،

776
00:38:38,850 --> 00:38:42,160
یکی از آن‌ها، مثلاً، روی یک قابلیت جدید کار می‌کردم.

777
00:38:42,160 --> 00:38:45,270
به طور کلی، هر کدوم از اون شاخه‌ها یه اسم خواهند داشت.

778
00:38:45,270 --> 00:38:47,350
بنابراین شاخه اصلی، شاخه پیش فرض شماست،

779
00:38:47,350 --> 00:38:50,850
که عموماً قرار است شامل جدیدترین\nنسخه پایدار باشد

780
00:38:50,850 --> 00:38:51,830
از کد شما.

781
00:38:51,830 --> 00:38:54,540
و وقتی که داری روی چیزهای جدیدتر کار می‌کنی، ویژگی‌های جدیدتر و بیشتر،

782
00:38:54,540 --> 00:38:56,873
ممکنه یه شاخه feature داشته باشی، جایی که داری کار می‌کنی

783
00:38:56,873 --> 00:38:59,310
مثلاً روی یک ویژگی دیگر کار می‌کنید.

784
00:38:59,310 --> 00:39:04,530
و در هر زمان مشخص هم، تمرکز شما\nفقط روی یکی از این دو شاخه است،

785
00:39:04,530 --> 00:39:07,500
و جایی که تمرکزت هست، وضعیت فعلی
مخزن شما چیه،

786
00:39:07,500 --> 00:39:11,310
آن چیزی که هست، توسط چیزی که ما هد صدا می زنیم تعیین می شود.

787
00:39:11,310 --> 00:39:13,740
پس اگر HEAD داره به master اشاره میکنه، یعنی

788
00:39:13,740 --> 00:39:17,910
مخزن شما در حال حاضر روی این شاخه کار می‌کند، جایی که شما اشکال را برطرف کردید.

789
00:39:17,910 --> 00:39:19,080
اما می‌توانی سر (هِد) را تغییر دهی.

790
00:39:19,080 --> 00:39:21,452
میتونید شاخه‌ای که می‌خواهید\nبهش نگاه کنید رو عوض کنید،

791
00:39:21,452 --> 00:39:23,160
و شما می توانید فیچر برنچ را چک آوت کنید،

792
00:39:23,160 --> 00:39:26,440
و بگوییم، بیایید به آن شاخه نگاهی بیندازیم،
و کار کردن روی آن را هم شروع کنیم.

793
00:39:26,440 --> 00:39:28,770
و شما می‌توانید شروع به کار کنید
روی این شاخه‌های مختلف

794
00:39:28,770 --> 00:39:32,760
با تغییر جایی که سرت هست،
تغییر از یک شاخه به دیگری،

795
00:39:32,760 --> 00:39:34,110
و سپس دوباره به عقب.

796
00:39:34,110 --> 00:39:37,110
و فقط وقتی مطمئن شدی که، می‌دونی چیه، این باگ رفع شده،

797
00:39:37,110 --> 00:39:40,680
و این ویژگی در یک جای رضایت‌بخش قرار دارد، سپس، بعد از همه اینها،

798
00:39:40,680 --> 00:39:42,810
می‌تونیم اون تغییرات رو دوباره با هم ادغام کنیم،

799
00:39:42,810 --> 00:39:46,750
طوری که همه چیز برگرده روی این شاخهٔ اصلی یکپارچه که

800
00:39:46,750 --> 00:39:49,640
حالا همه آخرین کدها رو داره.

801
00:39:49,640 --> 00:39:52,080
و این قدرت واقعی
شاخه‌ی گیت است، این توانایی

802
00:39:52,080 --> 00:39:55,710
که بگویم مایلم همزمان روی چند چیز کار کنم

803
00:39:55,710 --> 00:39:59,190
و روی یک ویژگی کار کنم
بدون مختل کردن مستر

804
00:39:59,190 --> 00:40:01,240
نسخه کد. version of the code.

805
00:40:01,240 --> 00:40:04,770
خب، حالا بیاین یه نگاهی به یه مثال بندازیم
از اینکه چطور ممکنه بخوایم این کار رو انجام بدیم.

807
00:40:08,100 --> 00:40:12,800
خب، اینجا توی فایل hello.html من، دارم یکم استایل به این تگ h1 اضافه می‌کنم.

808
00:40:12,800 --> 00:40:14,360
من رنگ آبی رو اضافه کردم.

809
00:40:14,360 --> 00:40:16,880
و فرض کنیم که من مایلم یه تغییراتی ایجاد کنم.

810
00:40:16,880 --> 00:40:21,590
من می‌خواهم استایل‌ها را از استایل‌دهی درون‌خطی خارج کنم،

811
00:40:21,590 --> 00:40:24,890
و من ترجیح می‌دهم که آن را به قسمت سرصفحه وب‌سایت منتقل کنم،

812
00:40:24,890 --> 00:40:28,220
چون قبلاً تصمیم گرفتیم که این طراحی کمی برای وب بهتره

813
00:40:28,220 --> 00:40:30,210
صفحه‌ای مانند این.

814
00:40:30,210 --> 00:40:33,210
میتونم اون تغییرات رو فورا ایجاد کنم، ولی بجاش،

815
00:40:33,210 --> 00:40:35,910
اگر انتظار داشته باشم شاید
روی تغییرات متعددی کار کنم،

816
00:40:35,910 --> 00:40:39,750
میتونم به یه شاخه دیگه برم، و از اونجا به یه چیز دیگه منشعب بشم

817
00:40:39,750 --> 00:40:41,650
برای کار روی این تغییرات جدید.

818
00:40:41,650 --> 00:40:44,610
و این هم برخی از دستورات اصلی برای دانستن در این مورد.

819
00:40:44,610 --> 00:40:49,380
اگر تایپ کنم git branch، آن به من خواهد گفت که در حال حاضر روی کدام شاخه هستم

820
00:40:49,380 --> 00:40:52,540
و چه شاخه‌هایی
در مخزن من وجود دارند.

821
00:40:52,540 --> 00:40:54,660
خب اینجا، برای مثال، من تایپ می‌کنم گیت برنچ، و من

822
00:40:54,660 --> 00:40:57,390
می‌بینم که فقط یه شاخه دارم به اسم مستر،

823
00:40:57,390 --> 00:40:59,460
و ستاره در سمت\nچپ به من می گوید

824
00:40:59,460 --> 00:41:01,620
که این شاخه‌ای است
که من در حال حاضر روی آن هستم،

825
00:41:01,620 --> 00:41:04,240
تنها شاخه‌ای که وجود دارد.

826
00:41:04,240 --> 00:41:08,830
اگه بخوام یه شاخه جدید رو چک‌اوت کنم، می‌تونم تایپ کنم گیت چک‌اوت،

827
00:41:08,830 --> 00:41:13,330
و اگر یک شاخه جدید باشد، تایپ می‌کنم git checkout -b و سپس

828
00:41:13,330 --> 00:41:14,850
اسم شاخه جدید رو.

829
00:41:14,850 --> 00:41:17,050
و اسم شاخه جدید رو استایل میذارم، چون من

830
00:41:17,050 --> 00:41:20,690
قراره یه سری تغییرات ظاهری تو صفحه‌ی وب ایجاد کنم، مثلاً.

831
00:41:20,690 --> 00:41:24,130
خب، من تایپ کردم git checkout -b style، و گیت یه پیام بهم میده.

832
00:41:24,130 --> 00:41:27,700
من به یک شاخهٔ جدید به نام استایل سوییچ کرده‌ام.

833
00:41:27,700 --> 00:41:30,590
و حالا، اگر دوباره تایپ کنم گیت
شاخه، شما

834
00:41:30,590 --> 00:41:32,540
می‌بینید که حالا دو تا شاخه دارم.

835
00:41:32,540 --> 00:41:35,720
من شاخه اصلی رو دارم، که شاخه‌ای هست که در اصل روش بودم،

836
00:41:35,720 --> 00:41:37,580
و حالا شاخه استایل رو دارم، که

837
00:41:37,580 --> 00:41:41,210
این شاخهٔ جدیدیه که الان روش هستم، همونطور که با ستاره مشخص شده

838
00:41:41,210 --> 00:41:43,032
در سمت چپ.

839
00:41:43,032 --> 00:41:45,990
خب حالا که توی این شاخه جدید هستم،\nمی‌تونم هر تغییری که دلم بخواد ایجاد کنم

840
00:41:45,990 --> 00:41:48,960
که هر کاری بخوام می تونم بکنم، و هیچ کاری
که انجام بدم، خراب نمیشه

841
00:41:48,960 --> 00:41:51,960
چیزی که روی شاخه اصلی هست رو، تا وقتی که توی این شاخه بمونم.

842
00:41:51,960 --> 00:41:56,240
پس میتونم بگم، باشه، بیاین امتحان کنیم استایل رو حذف کنیم،

843
00:41:56,240 --> 00:41:58,440
و بذارید یه تگ استایل\nبه بالاش اضافه کنیم، جایی که

844
00:41:58,440 --> 00:42:02,960
می‌تونم بگم که می‌خوام رنگ h1 من آبی باشه، به عنوان مثال.

845
00:42:02,960 --> 00:42:05,040
خب، من یه عالمه تغییر ایجاد کردم، و من

846
00:42:05,040 --> 00:42:07,120
می‌خوام الان اون تغییرات رو ثبت کنم.

847
00:42:07,120 --> 00:42:12,590
می‌گم git commit "انتقال مشخصه‌های استایل."

848
00:42:12,590 --> 00:42:14,480
این تغییریه که من ایجادش کردم.

849
00:42:14,480 --> 00:42:18,140
ولی من فقط این تغییرات رو
در شاخه استایل ایجاد کردم.

850
00:42:18,140 --> 00:42:20,720
باز هم، اگر دستور 'گیت برنچ' را اجرا کنم، خواهید دید که من در حال حاضر

851
00:42:20,720 --> 00:42:24,440
روی شاخه‌ی استایل هستم، جایی که اطلاعات استایل رو به بالا منتقل کردم

852
00:42:24,440 --> 00:42:30,110
اینجا به بالای صفحه‌ام منتقل کردم، اما می‌توانم با استفاده از git checkout بین شاخه‌ها جابه‌جا شوم.

853
00:42:30,110 --> 00:42:32,630
گیت چک‌اوت به من اجازه می‌دهد
تا بین شاخه‌ها جابه‌جا شوم.

854
00:42:32,630 --> 00:42:35,210
ما قبلاً از git checkout -b برای ایجاد یک شاخه جدید استفاده می کردیم،

855
00:42:35,210 --> 00:42:37,970
اما اگر دارید به شاخه‌ای переключаетесь که уже существует،

856
00:42:37,970 --> 00:42:41,420
میتونم فقط بگم گیت چک‌اوت
مستر، برای مثال،

857
00:42:41,420 --> 00:42:45,660
برای تغییر شاخه فعلی‌ام از شاخه استایل به شاخه مستر.

858
00:42:45,660 --> 00:42:47,330
خب، من دستور `git checkout master` رو اجرا می‌کنم.

859
00:42:47,330 --> 00:42:49,670
الان روی شاخه اصلی هستم.

860
00:42:49,670 --> 00:42:51,590
و حالا خواهید دید، اگر
برگردم به فایل،

861
00:42:51,590 --> 00:42:55,210
الان برگشتم به استایل دهی درون خطی بدون استایل دهی

862
00:42:55,210 --> 00:42:57,900
این بالا در قسمت سرصفحه.

863
00:42:57,900 --> 00:43:01,880
اگر دوباره شاخه‌ی استایل رو بررسی کنم، فایل بلافاصله برمی‌گرده.

864
00:43:01,880 --> 00:43:04,970
حالا من کد استایل رو اینجا دارم
توی قسمت استایل صفحه،

865
00:43:04,970 --> 00:43:06,720
و نه درون‌خطی.

866
00:43:06,720 --> 00:43:10,960
بنابراین این تغییرات فقط در یک قسمت از صفحه ایجاد شده اند.

867
00:43:10,960 --> 00:43:14,373
پس حالا دوباره مستر رو چک می‌کنم.

868
00:43:14,373 --> 00:43:17,040
و شاید بخواهم تغییرات دیگری\nروی شاخه اصلی‌ام ایجاد کنم.

869
00:43:17,040 --> 00:43:19,997
شاید متوجه شدم که می‌خواهم این علامت نگارشی اضافی را حذف کنم.

870
00:43:19,997 --> 00:43:20,580
میدونی چیه؟

871
00:43:20,580 --> 00:43:22,290
دو علامت تعجب با تعداد زیاد.

872
00:43:22,290 --> 00:43:25,130
برش می‌داریم-- حالا فقط یکی داریم.

873
00:43:25,130 --> 00:43:26,810
و حالا این تغییرات را اعمال خواهیم کرد.

874
00:43:26,810 --> 00:43:32,420
من میگم گیت کامیت و "حذف علامت نقطه گذاری."

875
00:43:32,420 --> 00:43:37,680
و حالا من فقط از شاخه اصلی علائم نگارشی را حذف کرده‌ام.

876
00:43:37,680 --> 00:43:41,090
پس این شاخه اصلی حالا فقط یه علامت تعجب اینجا داره،

877
00:43:41,090 --> 00:43:44,810
اما هنوز هم استایل دهی درون خطی را دارد.

878
00:43:44,810 --> 00:43:48,170
پس حالا کاری که می‌خوام انجام بدم اینه که
اون تغییرات رو ادغام کنم

879
00:43:48,170 --> 00:43:49,850
که از شاخهٔ دیگه ایجاد کردم.

880
00:43:49,850 --> 00:43:52,520
می‌خوام چیزی رو که داشتم روش کار می‌کردم\nتوی شاخه‌ی استایل، بردارم

881
00:43:52,520 --> 00:43:57,340
و اون رو با این نسخه فعلی از ریپازیتوری روی شاخه اصلیم ادغام کنم.

882
00:43:57,340 --> 00:44:01,220
و برای انجام این کار، دستوری\nکه استفاده خواهیم کرد git merge نام دارد.

883
00:44:01,220 --> 00:44:02,750
پس گیت مرج.

884
00:44:02,750 --> 00:44:06,380
متوجه باشید که من در حال حاضر روی شاخه اصلی هستم، اما اگر دستور گیت

885
00:44:06,380 --> 00:44:11,750
ادغام کنم و بعد استایل، قراره هر چیزی که روی شاخه استایل هست رو برداره

886
00:44:11,750 --> 00:44:15,440
و سعی می‌کنه اون رو توی شاخه‌ی فعلی من ادغام کنه.

887
00:44:15,440 --> 00:44:19,220
و چیزی که خواهیم فهمید این است که قادریم بیشتر راه را برویم،

888
00:44:19,220 --> 00:44:20,660
ولی یه تداخل ادغام وجود داره.

889
00:44:20,660 --> 00:44:22,743
حالا این همیشه موقع ادغام اتفاق نمی افته.

890
00:44:22,743 --> 00:44:24,590
گاهی اوقات، گیت آنقدر باهوش خواهد بود که بداند

891
00:44:24,590 --> 00:44:26,780
که اگر یک تغییر در یک قسمت از یک فایل
ایجاد شده باشد،

892
00:44:26,780 --> 00:44:29,697
و یک تغییر در بخش دیگری از فایل ایجاد شده باشد، هنگام ادغام

893
00:44:29,697 --> 00:44:32,720
وقتی آن تغییرات را دوباره با هم ادغام می کنید، Git آن تداخلات ادغام را حل خواهد کرد

894
00:44:32,720 --> 00:44:33,870
به صورت خودکار.

895
00:44:33,870 --> 00:44:37,460
اما در این مورد، اینطور نبود، زیرا هم شاخه استایل من
و هم شاخه اصلی من تغییراتی در یک خط کد ایجاد کردند،

896
00:44:37,460 --> 00:44:42,230
شاخه و شاخه اصلی من تغییراتی در یک خط کد ایجاد کردند،

897
00:44:42,230 --> 00:44:44,390
و خواهیم دید چرا اگر اینجا برگردم.

898
00:44:44,390 --> 00:44:46,430
متوجه خواهید شد که در نسخه ادغام‌شده،

899
00:44:46,430 --> 00:44:49,940
ما این تگ استایل را در سر صفحه می بینیم.

900
00:44:49,940 --> 00:44:52,550
مشکلی نیست، هیچ تضادی
وجود ندارد، برای اینکه این فقط

901
00:44:52,550 --> 00:44:56,150
خطوطی که به این صفحه اضافه شده اند، بنابراین هیچ تضادی وجود نداشت.

902
00:44:56,150 --> 00:44:58,730
تعارض اینجا بوجود میاد، که همونجاییه که،

903
00:44:58,730 --> 00:45:02,660
در نسخه من در شاخه اصلی، این علامت نقطه گذاری را حذف کردم

904
00:45:02,660 --> 00:45:05,870
علامت، در حالی که در نسخه‌ی شاخه‌ی استایل،

905
00:45:05,870 --> 00:45:11,270
که اینجا با کلمه "استایل" می‌بینیم، استایل دهی درون خطی را حذف کردیم.

906
00:45:11,270 --> 00:45:13,170
پس باید یه جوری اینا رو حل کنیم.

907
00:45:13,170 --> 00:45:16,160
و کاری که در نهایت انجام خواهم داد این است که از شر این استایل ها خلاص شوم

908
00:45:16,160 --> 00:45:20,090
نشانه‌ها، یا نشانه‌های تضاد را حذف کنم و بگویم، می‌دانید چیست؟

909
00:45:20,090 --> 00:45:23,000
من می‌خوام نسخه به‌روزرسانی‌شده
دیگه هیچ‌کدوم از این‌ها رو نداشته باشه،

910
00:45:23,000 --> 00:45:27,150
نباید استایل درون‌خطی داشته باشه، و نباید علامت نگارشی اضافی داشته باشه.

911
00:45:27,150 --> 00:45:30,530
خب، حالا من این تغییرات رو ایجاد کردم، تداخل ادغام رو حل کردم،

912
00:45:30,530 --> 00:45:32,660
و حالا می توانم commit کنم.

913
00:45:32,660 --> 00:45:36,140
من مشکلات ادغام را برطرف کردم.

914
00:45:36,140 --> 00:45:41,030
و این الان روال کلیِ نحوه‌ی کارِ شاخه‌بندی در گیت هست.

915
00:45:41,030 --> 00:45:43,090
وقتی داری روی یه چیز جدید کار می‌کنی، تو

916
00:45:43,090 --> 00:45:44,840
ممکنه برای اینکه بگی میخوای، ازش یه شاخه جدا کنی

917
00:45:44,840 --> 00:45:48,560
دوست دارید روی قسمت دیگری از این برنامه وب کار کنید.

918
00:45:48,560 --> 00:45:51,310
شما تغییرات ایجاد می‌کنید، commit می‌کنید، تغییرات را به آن شاخه جدید اضافه می‌کنید،

919
00:45:51,310 --> 00:45:54,268
و وقتی از اون تغییرات راضی بودید، وقتی در اون حالت هستند

920
00:45:54,268 --> 00:45:56,990
که می‌خواهید باشند، می‌توانید آن‌ها را دوباره ادغام کنید

921
00:45:56,990 --> 00:45:59,720
در نسخه اصلی ریپازیتوری.

922
00:45:59,720 --> 00:46:03,170
البته همیشه نه، ولی بعضی وقت‌ها باید با تداخل‌های ادغام دست و پنجه نرم کنید.

923
00:46:03,170 --> 00:46:05,270
و اگر مراقب باشید که کجا تغییرات ایجاد می‌کنید

924
00:46:05,270 --> 00:46:09,080
و سعی کنید دقت کنید که تغییرات را در یک خط کد اعمال نکنید

925
00:46:09,080 --> 00:46:13,040
در دو جای مختلف، می‌توانید احتمال وقوع

926
00:46:13,040 --> 00:46:15,260
یه تداخل ادغام بشه، چون گیت در نهایت

927
00:46:15,260 --> 00:46:20,583
خیلی باهوشه در مورد اینکه چطور سعی میکنه با این جور مسائل برخورد کنه.

928
00:46:20,583 --> 00:46:23,250
و در آخر، نگاهی خواهیم انداخت
به چند ویژگی گیت‌هاب

929
00:46:23,250 --> 00:46:25,380
مخصوصاً که می تواند
به شما بسیار کمک کند به عنوان شما

930
00:46:25,380 --> 00:46:29,070
شروع می‌کنید به کار روی پروژه‌های بزرگ‌تری که بخش‌های متحرک مختلف زیادی دارند

931
00:46:29,070 --> 00:46:33,850
تکه ها، که اولین آن انشعاب دادن یک مخزن گیت‌هاب است.

932
00:46:33,850 --> 00:46:38,190
خب، بیایید به یک ریپازیتوری گیت‌هاب برویم
و ریپازیتوری گیت‌هاب را ببینیم

933
00:46:38,190 --> 00:46:40,350
برای مثال، برای بوت استرپ.

934
00:46:40,350 --> 00:46:45,450
پس بوت استرپ، که یک کتابخانه CSS است
که دفعه قبل نگاهی به آن انداختیم،

935
00:46:45,450 --> 00:46:48,600
یک کتابخانه است که دسترسی آسان به
به مجموعه ای از CSS های مختلف به ما می دهد

936
00:46:48,600 --> 00:46:51,570
ویژگی‌ها دسترسی آسان می‌دهد، و کل این مجموعه متن‌باز است، یعنی

937
00:46:51,570 --> 00:46:54,690
همه کدهای بوت استرپ به صورت عمومی برای همه در دسترس است

938
00:46:54,690 --> 00:46:57,930
که هر کسی بتونه ببینه، و مهم‌تر از اون،\nکه هر کسی بتونه توش سهیم باشه،

939
00:46:57,930 --> 00:47:00,960
اینکه فقط یک نفر روی تمام بوت استرپ کار نکرده،

940
00:47:00,960 --> 00:47:05,700
اما این یک مخزن مبتنی بر جامعه است
که افراد زیادی می توانند روی آن کار کنند،

941
00:47:05,700 --> 00:47:08,700
اضافه کردن ویژگی‌های جدید، و ایجاد
اصلاحات در کد بوت استرپ،

942
00:47:08,700 --> 00:47:12,790
و با بهره‌گیری از ویژگی‌های گیت، در آنها همکاری می‌کنیم

943
00:47:12,790 --> 00:47:17,340
و بنابراین، اگر یک ریپازیتوری گیت پیدا کردید که می‌خواهید در آن مشارکت کنید،

944
00:47:17,340 --> 00:47:20,490
یا اگر می‌خواهید افراد دیگری بتوانند در مخزن شما مشارکت کنند،

945
00:47:20,490 --> 00:47:24,210
یک کاری که می‌تونید بکنید اینه که از اون ریپازیتوری یه فورک بگیرید، و با فورک کردن.

946
00:47:24,210 --> 00:47:28,050
منظور ما ساختن یک نسخه شخصی از ریپازیتوری اصلی است.

947
00:47:28,050 --> 00:47:31,230
و این بالا در گوشه سمت راست\nصفحه گیت‌هاب

948
00:47:31,230 --> 00:47:35,970
اینجا یه دکمه هست به اسم فورک (Fork)، و میبینیم که الان حدود ۶۸۰۰۰ نفر

949
00:47:35,970 --> 00:47:38,400
تا به حال حدود ۶۸۰۰۰ نفر ریپازیتوری بوت‌استرپ را فورک کرده‌اند،

950
00:47:38,400 --> 00:47:43,000
یک کپی از ریپازیتوری
به حساب گیت‌هاب خودشان درست کردند.

951
00:47:43,000 --> 00:47:47,400
و بنابراین می‌توانستیم خودمان آن را فورک کنیم فقط
با کلیک کردن روی این دکمه‌ای که فورک نام دارد

952
00:47:47,400 --> 00:47:49,950
و بعدش نسخهٔ خودمون از ریپازیتوری رو بدست بیاریم

953
00:47:49,950 --> 00:47:53,790
که بعد بتونیم اون رو کلون کنیم و ازش پوش و پول هم بگیریم.

954
00:47:53,790 --> 00:47:56,640
دلیل اینکه ممکنه این کار رو بکنیم اینه که مخزن بوت استرپ،

955
00:47:56,640 --> 00:48:00,030
در حالی که عمومی است، به هیچ‌کس اجازه نمی‌دهد که به آن پوش کند.

956
00:48:00,030 --> 00:48:02,340
این احتمالا ناامن خواهد بود اگر هر کسی در دنیا

957
00:48:02,340 --> 00:48:05,520
می‌تونه کد اصلی بوت‌استرپ رو به‌روز کنه، ولی کاری که می‌تونی انجام بدی

958
00:48:05,520 --> 00:48:09,240
میتونید کد رو کپی کنید، یه فورک ازش درست کنید، تغییرات رو توش ایجاد کنید،

959
00:48:09,240 --> 00:48:10,433
فشار بده و بکِش بهش.

960
00:48:10,433 --> 00:48:13,350
و بعد، وقتی حس کردید یک
مشارکتی داشتید که مایلید

961
00:48:13,350 --> 00:48:15,960
دوست دارید آن را به بوت استرپ پس بفرستید، می‌توانید

962
00:48:15,960 --> 00:48:19,860
چیزی که بهش میگن درخواست pull، اینه که شما درخواست می‌کنید که کدتون وارد کد Bootstrap بشه.

963
00:48:19,860 --> 00:48:22,140
کد شما به کد بوت استرپ وارد شود.

964
00:48:22,140 --> 00:48:25,740
و می‌توانیم نگاه کنیم، برای مثال،\nبه تب درخواست‌های pull بوت‌استرپ.

965
00:48:25,740 --> 00:48:29,040
به نظر می‌رسد که در حال حاضر ۷۱ درخواست pull باز وجود دارد.

966
00:48:29,040 --> 00:48:32,640
هفتاد و یک نفر هستند که یک سری اصلاحات انجام داده‌اند

967
00:48:32,640 --> 00:48:34,650
یا تغییراتی در کد بوت استرپ ایجاد کرده اند،

968
00:48:34,650 --> 00:48:36,780
و شما می توانید یک درخواست pull ارسال کنید
تا بگویید که شما

969
00:48:36,780 --> 00:48:41,160
شما می خواهید آن تغییرات را بپذیرید و با بوت استرپ ادغام کنید

970
00:48:41,160 --> 00:48:43,260
کد اصلی و افرادی که از آن نگهداری

971
00:48:43,260 --> 00:48:45,510
کد بوت‌استرپ در این ریپازیتوری خاص

972
00:48:45,510 --> 00:48:49,440
می‌توانند آن درخواست‌های pull را بررسی کنند، بازخورد ارائه دهند، درخواست تغییرات اضافی کنند،

973
00:48:49,440 --> 00:48:52,890
و بعد وقتی همه راضی بودن، میتونن اون تغییرات رو ادغام کنن

974
00:48:52,890 --> 00:48:54,960
به کد اصلی بوت استرپ.

975
00:48:54,960 --> 00:48:57,990
و این یکی از مزایای کلیدی نرم‌افزار متن‌باز است،

976
00:48:57,990 --> 00:49:01,920
توانایی افراد متعدد برای کار کردن روی یک قطعه کد یکسان،

977
00:49:01,920 --> 00:49:04,980
و اینکه یک جامعه بتواند
در یافتن باگ‌ها همکاری کند

978
00:49:04,980 --> 00:49:07,950
روی اینکه چه تغییراتی ایجاد کنیم، روی اینکه بفهمیم

979
00:49:07,950 --> 00:49:11,100
چگونه یک مخزن موجود را بهبود بخشیم

980
00:49:11,100 --> 00:49:14,010
و آن را در آینده بهتر کنیم.

981
00:49:14,010 --> 00:49:16,350
و یک نکته‌ی آخر
که ارزش اشاره کردن در مورد گیت‌هاب رو داره

982
00:49:16,350 --> 00:49:18,930
یک ویژگی اضافی به نام صفحات گیت‌هاب نیز وجود دارد.

983
00:49:18,930 --> 00:49:21,720
گیتهاب پیجز یک روش رایگان است
که گیتهاب فراهم می‌کند

984
00:49:21,720 --> 00:49:24,240
برای اینکه بتونیم سریع یک وبسایت با HTML،

985
00:49:24,240 --> 00:49:26,850
و CSS، و شاید حتی کمی جاوا اسکریپت،

986
00:49:26,850 --> 00:49:29,340
و آن را برای اینکه هر کسی بتواند ببیند، روی اینترنت منتشر کنید.

987
00:49:29,340 --> 00:49:33,420
و هر کسی که حساب گیت‌هاب داشته باشد
اجازه دارد یک صفحه‌ی گیت‌هاب بسازد

988
00:49:33,420 --> 00:49:34,970
وبسایت به صورت رایگان.

989
00:49:34,970 --> 00:49:36,370
و برای انجام این کار--

990
00:49:36,370 --> 00:49:38,340
ما می توانیم اکنون آن را نشان دهیم--

991
00:49:38,340 --> 00:49:43,830
تنها کاری که باید در گیت‌هاب انجام دهید این است که یک مخزن جدید ایجاد کنیم

992
00:49:43,830 --> 00:49:44,960
که اسمش رو میذاریم--

993
00:49:44,960 --> 00:49:50,310
اسمش معمولاً باید نام کاربری شما باشد، github.io نام مرسوم است

994
00:49:50,310 --> 00:49:53,190
برای سایت گیت‌هاب پیج‌ز شما، اگرچه می‌تواند نام‌های دیگری هم داشته باشد.

995
00:49:53,190 --> 00:49:56,290
شما فقط باید به صورت دستی\nGitHub Pages را روشن کنید.

996
00:49:56,290 --> 00:49:59,440
و ما پیش میریم و این ریپازیتوری رو الان میسازیم.

997
00:49:59,440 --> 00:50:04,110
اگر یک گت‌آپ ریپازیتوری بسازید به اسم نام کاربری‌تان، دات گیت‌هاب دات آی‌او،

998
00:50:04,110 --> 00:50:07,030
به طور خودکار از
صفحات گیت‌هاب پشتیبانی می‌کند،

999
00:50:07,030 --> 00:50:12,490
و معنی‌اش این است که من می‌توانم این آدرس را بردارم و می‌توانم آن را کلون کنم.

1000
00:50:12,490 --> 00:50:17,680
خب، می‌تونم بگم گیت کلون، بعدش این آدرس اینترنتی.

1001
00:50:17,680 --> 00:50:21,940
من یک مخزن خالی را شبیه‌سازی کرده‌ام، اما می‌توانم وارد این مخزن شوم

1002
00:50:21,940 --> 00:50:23,800
و چند فایل به آن اضافه کنم.

1003
00:50:23,800 --> 00:50:30,750
می‌تونم بگم، بذارید اضافه کنیم، به صورت پیش‌فرض، یه فایل به اسم index.html هست،

1004
00:50:30,750 --> 00:50:34,130
و یک فایل HTML ایجاد خواهم کرد.

1005
00:50:34,130 --> 00:50:35,690
این سایت من است.

1006
00:50:35,690 --> 00:50:43,310
و متن آن فقط می‌گوید،\n"این وب‌سایت صفحات GitHub من است."

1007
00:50:43,310 --> 00:50:45,960
یه همچین چیزی، یه چیز ساده.

1008
00:50:45,960 --> 00:50:49,540
اما اگر بخواهید، قطعا می‌تواند پیچیده‌تر باشد.

1009
00:50:49,540 --> 00:50:54,490
داخل ترمینالم، این فایل index.html را git add می‌کنم،

1010
00:50:54,490 --> 00:50:55,660
و یک کامیت انجام می‌دهم.

1011
00:50:55,660 --> 00:50:58,327
و اغلب، اولین کامیت،\nشما فقط، در پیام کامیت،

1012
00:50:58,327 --> 00:51:01,890
می‌نویسیم "اولین کامیت" که بدونیم اولین کامیت بوده.

1013
00:51:01,890 --> 00:51:04,590
و بعد اون تغییرات رو الان به گیت‌هاب پوش می‌کنم.

1015
00:51:07,250 --> 00:51:10,760
پس اگر تغییرات خودتون رو به یک ریپازیتوری به اسم اسم کاربریتون،

1016
00:51:10,760 --> 00:51:18,060
.github.io، پس اگر یه نگاهی
به تنظیمات بندازید و به پایین اسکرول کنید،

1017
00:51:18,060 --> 00:51:22,700
می‌بینید که صفحات گیت‌هاب به‌طور پیش‌فرض\nآماده انتشار است.

1018
00:51:22,700 --> 00:51:27,980
و حالا اگه روی این URL اسم کاربری‌ام، .github.io، کلیک کنم،

1019
00:51:27,980 --> 00:51:31,550
می‌بینید که روی اینترنت مستقر شده، طوری که هر کسی می‌تواند به این آدرس برود

1020
00:51:31,550 --> 00:51:32,420
و آن را ببینند.

1021
00:51:32,420 --> 00:51:35,780
آن‌ها یک عنوان بزرگ خواهند دید که می‌گوید\n"این وبسایت صفحه گیت‌هاب من است،"

1022
00:51:35,780 --> 00:51:39,320
چون این روشی است که مرورگر
دارد HTMLای که من را رندر می‌کند

1023
00:51:39,320 --> 00:51:41,777
چیزی که در ریپازیتوری گیت‌هاب پیجزم پوش کردم.

1024
00:51:41,777 --> 00:51:43,610
و مزیت انجام این کار این است که

1025
00:51:43,610 --> 00:51:46,610
الان خیلی راحت میشه وبسایتم رو\nبه سرعت بروز کنم.

1026
00:51:46,610 --> 00:51:50,300
تنها کاری که باید انجام بدم اینه که اگه تغییر جدیدی ایجاد کنم، می تونم اون تغییر رو ثبت کنم،

1027
00:51:50,300 --> 00:51:54,140
این تغییر رو به گیت‌هاب پوش کنم، و وقتی گیت‌هاب تشخیص بده که من یک پوش انجام دادم

1028
00:51:54,140 --> 00:51:58,460
به ریپازیتوری گیت‌هاب پیجز من، سپس وبسایت من را آپدیت می‌کند که هر کسی

1029
00:51:58,460 --> 00:52:02,578
در دنیا با رفتن\nبه نام کاربری‌ام، .github.io، به آن دسترسی داشته باشد.

1030
00:52:02,578 --> 00:52:05,120
و این به شما امکان می‌دهد از تمام\nاین ویژگی‌های گیت استفاده کنید،

1031
00:52:05,120 --> 00:52:08,630
قابلیت ایجاد شاخه، قابلیت کار بر روی ویژگی‌های مختلف وب

1032
00:52:08,630 --> 00:52:13,550
صفحه در زمان های مختلف، و برگرداندن
به نسخه های مختلف کد

1033
00:52:13,550 --> 00:52:14,910
همینطور.

1034
00:52:14,910 --> 00:52:18,140
خب، روی هم رفته، گیت تعدادی ابزار بسیار قدرتمند به ما داده

1035
00:52:18,140 --> 00:52:22,190
که این به ما این توانایی را داده که حالا بتونیم خیلی سریع و خیلی راحت

1036
00:52:22,190 --> 00:52:24,410
پیگیری هر گونه
تغییری که در کد ایجاد می‌کنیم را حفظ کنیم،

1037
00:52:24,410 --> 00:52:27,830
پیگیری اینکه یک قطعه کد چه زمانی
به‌روز می‌شود، و برای بازگشت سریع

1038
00:52:27,830 --> 00:52:30,290
و به نسخه‌های قدیمی‌تر
آن کد نگاهی بیندازیم،

1039
00:52:30,290 --> 00:52:33,950
و مخصوصاً، این به ما این توانایی را داده که کدمون رو

1040
00:52:33,950 --> 00:52:36,140
و با افراد دیگر روی آن با هم کار کنیم،

1041
00:52:36,140 --> 00:52:39,080
طوری که بتوانیم روی قسمت‌های متعددی از یک پروژه کار کنیم،

1042
00:52:39,080 --> 00:52:41,270
و یه نفر دیگه که داره روی همین پروژه کار می‌کنه

1043
00:52:41,270 --> 00:52:45,060
همچنین شخص دیگری که روی\nهمان پروژه کار می‌کند می‌تواند روی بخش‌های مختلفی از\nهمان پروژه روی شاخه‌های مختلف کار کند،

1044
00:52:45,060 --> 00:52:48,720
و خیلی آسونه که تغییراتمونو هماهنگ کنیم تا با هم کار کنیم.

1045
00:52:48,720 --> 00:52:50,870
و بنابراین گیت یک ابزار بسیار محبوب
است که نه تنها در

1046
00:52:50,870 --> 00:52:53,150
در دنیای برنامه نویسی وب،
بلکه مخصوصا هروقت

1047
00:52:53,150 --> 00:52:56,660
سر و کار داشتن با هر نوع پروژه بزرگتر، جایی که افراد متعددی ممکنه مشغول کار باشن

1048
00:52:56,660 --> 00:52:58,850
روی یک چیز
به طور همزمان، Git

1049
00:52:58,850 --> 00:53:02,390
این به ما امکان می‌دهد تا برنامه‌های وب خود را راحت‌تر توسعه\nدهیم

1050
00:53:02,390 --> 00:53:04,280
در طول این ترم.

1051
00:53:04,280 --> 00:53:07,490
دفعه بعد، نگاهی خواهیم انداخت به پایتون،\nکه یکی از اولین زبان‌های برنامه‌نویسی است

1052
00:53:07,490 --> 00:53:10,640
زبان‌هایی که با ادامه سفرمان به سمت ساختن، از آن‌ها استفاده خواهیم کرد

1053
00:53:10,640 --> 00:53:12,500
برنامه‌های وب پیچیده‌تری بسازیم.

1054
00:53:12,500 --> 00:53:14,320
میبینمت پس.